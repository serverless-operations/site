{"hash":"899a7dadc9c3ff481284dbd8cf731b9f93beffd5","data":{"allWordPressBlog":{"pageInfo":{"totalPages":2,"currentPage":2},"edges":[{"node":{"id":"26","title":"エンタープライズなAWSサーバーレスアプリケーションを構成管理する時の方法と考え方","date":"2020.05.11","path":"/blog/26/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_8c340426-2aa6-94e1-469d-1684569d9809.png","altText":"","mediaDetails":{"width":816}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"8","title":"AWS","path":"/tag/aws/"},{"id":"2","title":"Serverless","path":"/tag/serverless/"}]}},{"node":{"id":"43","title":"サーバーレスアーキテクチャでリアルタイムランキングAPIを作る","date":"2020.02.19","path":"/blog/43/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/02/https___qiita-image-store.s3.amazonaws.com_0_65478_4a21b576-125c-6971-f052-f4a67b4fe8b9.png","altText":"","mediaDetails":{"width":957}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"13","title":"Kinesis","path":"/tag/kinesis/"},{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"}]}},{"node":{"id":"38","title":"brefを使って簡単にLambdaのPHP Custom Runtime環境を構築する","date":"2020.01.26","path":"/blog/38/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/01/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_2eb95b0b-29ab-0274-8eab-276f746ca0f1.png","altText":"","mediaDetails":{"width":1912}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"10","title":"Lambda","path":"/tag/lambda/"},{"id":"12","title":"PHP","path":"/tag/php/"}]}},{"node":{"id":"49","title":"Auth0のAutomatic Migration機能で旧DBからのユーザーデータのマイグレーションを行う","date":"2019.08.11","path":"/blog/49/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2019/08/auth0-logo-forlightbg.png","altText":"","mediaDetails":{"width":534}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"15","title":"Auth0","path":"/tag/auth0/"}]}},{"node":{"id":"48","title":"Auth0のCI/CDパイプラインをCircleCIを使って作る","date":"2019.08.05","path":"/blog/48/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2019/08/auth0-logo-forlightbg.png","altText":"","mediaDetails":{"width":534}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"15","title":"Auth0","path":"/tag/auth0/"},{"id":"17","title":"CircleCI","path":"/tag/circleci/"}]}},{"node":{"id":"47","title":"Serverless Framework Enterpriseで快適なサーバレスアーキテクチャの開発と運用を行おう","date":"2019.06.08","path":"/blog/47/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2019/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_65a640fc-1b38-5652-46aa-e61f7d25e188.png","altText":"","mediaDetails":{"width":2162}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"}]}},{"node":{"id":"50","title":"Serverless Frameworkを使ってビルド環境とデプロイ環境が分かれている場合のパイプラインを考える","date":"2019.02.19","path":"/blog/50/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/https___camo.githubusercontent.jpeg","altText":"","mediaDetails":{"width":1950}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"}]}},{"node":{"id":"44","title":"Auth0+DynamoDBでユーザ認証基盤を作る","date":"2018.10.18","path":"/blog/44/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2019/08/auth0-logo-forlightbg.png","altText":"","mediaDetails":{"width":534}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"15","title":"Auth0","path":"/tag/auth0/"},{"id":"14","title":"DynamoDB","path":"/tag/dynamodb/"}]}},{"node":{"id":"51","title":"Serverless Componentsとは何か？サーバーレスなアプリケーションの何を解決するのか","date":"2018.05.03","path":"/blog/51/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2018/05/62cdc4b9-afab-9b0a-d1ca-bfc0476527b6.gif","altText":"","mediaDetails":{"width":1800}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"}]}},{"node":{"id":"45","title":"AWS Lambdaのユニットテストのベストプラクティス(Node.js)","date":"2017.06.30","path":"/blog/45/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2017/06/AWS-Lambda_dark-bg@4x.png","altText":"","mediaDetails":{"width":300}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"10","title":"Lambda","path":"/tag/lambda/"},{"id":"16","title":"ユニットテスト","path":"/tag/e3-83-a6-e3-83-8b-e3-83-83-e3-83-88-e3-83-86-e3-82-b9-e3-83-88/"}]}},{"node":{"id":"262","title":"Amazon API Gateway の Custom Authorizerを使い、User PoolsのユーザでAPI認証を行う","date":"2017.05.13","path":"/blog/262/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"9","title":"API Gateway","path":"/tag/api-gateway/"},{"id":"32","title":"UserPool","path":"/tag/userpool/"}]}},{"node":{"id":"52","title":"Serverless FrameworkでStep Functionsが使えるプラグインをリリースしました","date":"2017.04.17","path":"/blog/52/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/https___camo.githubusercontent.jpeg","altText":"","mediaDetails":{"width":1950}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"},{"id":"18","title":"Step Functions","path":"/tag/step-functions/"}]}},{"node":{"id":"18","title":"API Gateway+Lambda+Serverless+TravisでAPI開発のCI/CDパイプラインを構築する","date":"2017.02.21","path":"/blog/18/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2017/02/https___qiita-image-store.s3.amazonaws.com_0_65478_57914bab-deb6-3058-39c9-a087ace85e9e.png","altText":"","mediaDetails":{"width":800}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"9","title":"API Gateway","path":"/tag/api-gateway/"},{"id":"10","title":"Lambda","path":"/tag/lambda/"},{"id":"2","title":"Serverless","path":"/tag/serverless/"}]}}]}},"context":{}}