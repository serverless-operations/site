{"hash":"7d8cc78e1b8fcf6bb367080efcae4f8df6dfb6c5","data":{"wordPressBlog":{"title":"Auth0+DynamoDBでユーザ認証基盤を作る","content":"\n<h2 class=\"wp-block-heading\">概要</h2>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F3ccec8f9-2b5f-6979-3c37-8608f3fb88ca.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cf277aa98f4751f400a8d1d37127a1b2\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F3ccec8f9-2b5f-6979-3c37-8608f3fb88ca.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cf277aa98f4751f400a8d1d37127a1b2\" alt=\"Untitled (1).png\"/></a></figure>\n\n\n\n<p>ユーザDBとその認証認可をセットで提供しているサービスはたくさんありますが、一つの問題としてそのサービスにユーザデータがロックインされちゃう問題があります。</p>\n\n\n\n<p>それを回避するためには自分たちでユーザDBについてはデータモデリングを行い、認証と認可の部分は別のサービスに任せるというソリューションが最高なんじゃないかと考えて、Auth0とDynamoDBで実現できるか検証しました。結論としてはAuth0の<a href=\"https://auth0.com/docs/connections/database/custom-db\" rel=\"noreferrer noopener\" target=\"_blank\">Custom Database</a>の仕組みを使うことで出来ました。</p>\n\n\n\n<h2 class=\"wp-block-heading\">Clientアプリケーションの設定</h2>\n\n\n\n<ul><li><a href=\"https://auth0.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Auth0</a>のサイトへアクセスしてまずはアカウントを作成してください</li><li>Create Applicationからアプリケーションを作ります<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F42446482-d1d8-083a-132e-c60472a42983.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2a441405f25af2f3f753e6a4d1c404a8\" target=\"_blank\" rel=\"noreferrer noopener\"></a></li><li>QuickStartで使いたいテクノロジーを選択します<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F4ead23ac-96ef-fe08-15ee-851f91c956dc.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=61ead4a1fc61870d464cfcffb120f5b6\" target=\"_blank\" rel=\"noreferrer noopener\"></a></li><li>認証画面のサンプルコードが用意されてるのでそれをダウンロードしましょう</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F8f0cd273-f11d-f4b0-c481-cf1d95926b32.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fd68069182922cbdd341d5ab643ad842\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F8f0cd273-f11d-f4b0-c481-cf1d95926b32.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fd68069182922cbdd341d5ab643ad842\" alt=\"スクリーンショット 2018-10-18 23.25.38.png\"/></a></figure>\n\n\n\n<ul><li>ダウンロードしたサンプルのapp.jsを開いてdomainやclientIDの設定を行います。</li></ul>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>var webAuth = new auth0.WebAuth({\n    domain: 'horike37.auth0.com',\n    clientID: 'KJ28cvUXP5OFbmwzc0BK09ce3BKKxRgs',\n    redirectUri: window.location.href,\n    responseType: 'token id_token',\n    scope: 'openid',\n    leeway: 60\n  });</code></pre>\n\n\n\n<p>設定できたら、<code>npm install &amp; npm start</code>を実行して、<a href=\"http://localhost:3000%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%81%BE%E3%81%99%E3%80%82/\">http://localhost:3000にアクセスします。</a><br>すると認証用の画面が表示されているはずです。</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F994c9b9f-0d47-f9a4-7fb3-8fa639624ee5.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ed3e7027b6edce2cde57c825947c2157\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F994c9b9f-0d47-f9a4-7fb3-8fa639624ee5.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ed3e7027b6edce2cde57c825947c2157\" alt=\"スクリーンショット 2018-10-18 23.35.06.png\"/></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Custom Databaseの設定</h2>\n\n\n\n<ul><li>Auth0ダッシュボードの左メニューより、Connections &gt; DatabaseからUsername-Password-Authenticationを選択します<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F99feb51a-10d2-75e6-007c-7098866a05c5.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4d8a9e38f32c1502fa93d4410e944f17\" target=\"_blank\" rel=\"noreferrer noopener\"></a></li><li>Custom Databaseのタブを選択するとログインやサインアップ、パスワード変更などを実行するScriptを実装する画面にたどり着きます。まずは最低限のログインとサインアップでDynamoDBのユーザテーブルを使うようにしてみましょう</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F96691afe-e808-cafd-67f4-8a898dafc62e.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a646e91d715d29cfd1841ffc3feee4b2\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F96691afe-e808-cafd-67f4-8a898dafc62e.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a646e91d715d29cfd1841ffc3feee4b2\" alt=\"スクリーンショット 2018-10-18 23.39.46.png\"/></a></figure>\n\n\n\n<ul><li>DyanoDBには以下のようなuser_idをパーティションキーとするテーブルを定義します&nbsp;<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F408bd486-daac-77fc-74bb-23b3902a8b72.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9da1d43c124a5b2bf193d4489c3a6bbe\" target=\"_blank\" rel=\"noreferrer noopener\"></a></li></ul>\n\n\n\n<h2 class=\"wp-block-heading\">サインアップの実装</h2>\n\n\n\n<p>メールアドレスとパスワードをDBに登録します。<strong>注：このサンプルコードは動くことしか考えてない、非常に質の低いコードなので本番等ではコピペで使わないでね</strong></p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>function create(user, callback) {\n  var aws = require('aws-sdk');\n\n  aws.config.update({\n    accessKeyId: '&lt;accessKeyId>',\n    secretAccessKey: '&lt;secretAccessKey>',\n    region: 'us-east-1'\n  });\n  var dynamodb = new aws.DynamoDB();\n\n\n  bcrypt.hash(user.password, 10, function (err, hash) {\n    if (err) { return callback(err); }\n    var params = {\n      Item: {\n        \"id\": {\n          S: user.email\n        }, \n        \"password\": {\n          S: hash\n        },\n      }, \n      TableName: \"users\"\n    };\n    dynamodb.putItem(params, function(err, data) {\n      if (err) return callback(err); // an error occurred\n      else return callback(null);           // successful response\n    });\n  });\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">ログインの実装</h2>\n\n\n\n<p>入力されたメールアドレスとパスワードをDB渡して検証します。<strong>注：このサンプルコードは動くことしか考えてない、非常に質の低いコードなので本番等ではコピペで使わないでね</strong></p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>function login(email, password, callback) {\n  var aws = require('aws-sdk');\n  aws.config.update({\n    accessKeyId: '&lt;accessKeyId>',\n    secretAccessKey: '&lt;secretAccessKey>',\n    region: 'us-east-1'\n  });\n  var dynamodb = new aws.DynamoDB();\n  var params = {\n    Key: {\n      \"id\": {\n        S: email\n      },\n    }, \n    TableName: \"users\"\n  };\n\n  dynamodb.getItem(params, function(err, data) {\n  　if (err) return callback(err);\n    else {\n      bcrypt.compare(password, data.Item.password.S, function (err, isValid) {\n        if (err) {\n          callback(err);\n        } else if (!isValid) {\n          callback(new WrongUsernameOrPasswordError(email));\n        } else {\n          callback(null, {\n            email: data.Item.id\n          });\n        }\n      });\n    }\n  });\n}\n﻿</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">動作確認</h2>\n\n\n\n<p>では先程の認証画面に戻ってサインアップを試してみます。</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2Fa61a6249-9755-6a38-2941-6c8276b79d91.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ed5a7910ebe03b62e39d53d34672c217\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2Fa61a6249-9755-6a38-2941-6c8276b79d91.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ed5a7910ebe03b62e39d53d34672c217\" alt=\"スクリーンショット 2018-10-18 23.49.44.png\"/></a></figure>\n\n\n\n<p>SIGN UPをクリックするとうまく行ったようです。<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2Ff8c3bbd2-c966-66af-0056-24fcdee556f6.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=da8d00e6e2a146862bc50684743bb1d2\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<p>DynamoDBのデータ確認すると。。うおーーー！！！ちゃんとデータ出来てる！！<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F170a472e-c29a-0e96-b099-33e9305d433e.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4ce0e106ae39db0868b4ff0094f6f497\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<p>というわけで、Auth0 + DynamoDBがユーザディレクトリとしてベンダーロックイン、スケーラビリティの観点からかなり良いんじゃないかと思います。</p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2018.10.18","path":"/blog/44/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2019/08/auth0-logo-forlightbg.png","altText":"","mediaDetails":{"width":534}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"15","title":"Auth0","path":"/tag/auth0/"},{"id":"14","title":"DynamoDB","path":"/tag/dynamodb/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}