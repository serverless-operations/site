{"hash":"7d8cc78e1b8fcf6bb367080efcae4f8df6dfb6c5","data":{"wordPressBlog":{"title":"Serverless Componentsとは何か？サーバーレスなアプリケーションの何を解決するのか","content":"\n<figure class=\"wp-block-image\"><a href=\"https://qiita-image-store.s3.amazonaws.com/0/65478/62cdc4b9-afab-9b0a-d1ca-bfc0476527b6.gif\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-image-store.s3.amazonaws.com/0/65478/62cdc4b9-afab-9b0a-d1ca-bfc0476527b6.gif\" alt=\"serverless-components.gif\"/></a></figure>\n\n\n\n<p>Serverless.inc社より、<a href=\"https://github.com/serverless/components\" rel=\"noreferrer noopener\" target=\"_blank\">Serverless Components</a>という新しいOSSプロダクトが公開されました。<br>これがどういったものかというと、Serverless Frameworkは基本的にfunctionとeventは簡単に管理できますが、それ以外のDynamoDBやS3といった必要なCloud上のリソースを定義するのはまだまだ非常に大変です。それはResourcesセクションに生のCloudFormationを定義しないといけなからというのが大きな理由です。</p>\n\n\n\n<p>Serverless Componentsはそれを解決します。</p>\n\n\n\n<p>componentsという単位でCloud上のリソースを簡単に定義して再利用可能なものにします。これはAWSだけ対応しているのではなく、その他のCloudやNetlifyやGitHubといったSaaSサービスもcomponentという単位で定義出来ることがポイントです。<br>これは、サーバーレスアプリケーションがこれからはAWS上のものだけではなく、様々なSaaSやFunctionを組み合わせて定義することが必要になり、それは非常に複雑なものになることに対する解決策になるという意味です。</p>\n\n\n\n<h2 class=\"wp-block-heading\">使い方</h2>\n\n\n\n<p>Serverless ComponentsはCLIベースのアプリケーションとして公開されています。<br>以下がサンプルアプリケーションの設定例です。serverless.ymlファイルにcomponentsというセクションを定義してその下にcomponentをそれぞれ設定していきます。現状対応しているcomponentsは<a rel=\"noreferrer noopener\" href=\"https://github.com/serverless/components/tree/master/registry\" target=\"_blank\">components registry</a>で定義されているものがすべてになります</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>type: retail-app\nversion: 0.0.1\n\ncomponents:\n  webFrontend:\n    type: static-website\n    inputs:\n      name: retail-frontend\n      contentPath: ${self.path}/frontend\n      templateValues:\n        apiUrl: ${productsApi.url}\n      contentIndex: index.html\n      contentError: error.html\n      hostingRegion: us-east-1\n      hostingDomain: retail-${self.serviceId}.example.com\n      aliasDomain: www.retail-${self.serviceId}.example.com\n  createProduct:\n    type: aws-lambda\n    inputs:\n      memory: 512\n      timeout: 10\n      handler: products.create\n      root: ${self.path}/code\n      env:\n        productTableName: products-${self.serviceId}\n  getProduct:\n    type: aws-lambda\n    inputs:\n      memory: 512\n      timeout: 10\n      handler: products.get\n      root: ${self.path}/code\n      env:\n        productTableName: products-${self.serviceId}\n  listProducts:\n    type: aws-lambda\n    inputs:\n      memory: 512\n      timeout: 10\n      handler: products.list\n      root: ${self.path}/code\n      env:\n        productTableName: products-${self.serviceId}\n  productsApi:\n    type: rest-api\n    inputs:\n      gateway: aws-apigateway\n      routes:\n        /products: # routes begin with a slash\n          post: # HTTP method names are used to attach handlers\n            function: ${createProduct}\n            cors: true\n\n          # sub-routes can be declared hierarchically\n          /{id}: # path parameters use curly braces\n            get:\n              function: ${getProduct}\n              cors: true # CORS can be allowed with this flag\n\n        # multi-segment routes can be declared all at once\n        /catalog/{...categories}: # catch-all path parameters use ellipses\n          get:\n            function: ${listProducts}\n            cors: true\n  productsDb:\n    type: aws-dynamodb\n    inputs:\n      region: us-east-1\n      tables:\n        - name: products-${self.serviceId}\n          hashKey: id\n          indexes:\n            - name: ProductIdIndex\n              type: global\n              hashKey: id\n          schema:\n            id: number\n            name: string\n            description: string\n            price: number\n          options:\n            timestamps: true\n</code></pre>\n\n\n\n<p>そして、以下のコマンドで操作を行います</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ components deploy # 定義したcomponentsのデプロイ\n$ components info # デプロイ済みのcomponents情報の確認\n$ components remove # デプロイ済みのcomponentsの削除</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">サンプルアプリケーション</h2>\n\n\n\n<p>まずはをサンプルアプリケーション立ち上げてcomponentsを体験してみましょう。</p>\n\n\n\n<p>以下のコマンドでインストールしましょう。</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ npm install --global serverless-components</code></pre>\n\n\n\n<p>そして環境変数にAWSのアクセスキーを設定してください</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>export AWS_ACCESS_KEY_ID=my_access_key_id\nexport AWS_SECRET_ACCESS_KEY=my_secret_access_key</code></pre>\n\n\n\n<p>componentsのサンプルアプリケーションをgit cloneします</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ git clone https://github.com/serverless/components.git\n$ cd components/examples/retail-app</code></pre>\n\n\n\n<p>最後にデプロイします</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ components deploy\nCreating Bucket: 'retail-gebw40fi7i.example.com'\nCreating Bucket: 'www.retail-gebw40fi7i.example.com'\nCreating Role: func-gebw40fi7i-3naoitg1-execution-role\nCreating Role: func-gebw40fi7i-d2vuqltm-execution-role\nCreating Role: func-gebw40fi7i-rw1u3wpq-execution-role\nCreated table: 'products-gebw40fi7i'\nSeeding 3 items into table products-gebw40fi7i.\nCreating Lambda: func-gebw40fi7i-d2vuqltm\nCreating Lambda: func-gebw40fi7i-3naoitg1\nCreating Lambda: func-gebw40fi7i-rw1u3wpq\nItem inserted to table: 'products-gebw40fi7i'\n{\"id\":22,\"name\":\"Model A+\",\"description\":\"A precision-milled, highly durable enhancement of the Model A for performance applications.\",\"price\":8.99,\"createdAt\":\"2018-05-03T10:12:58.142Z\"}\nItem inserted to table: 'products-gebw40fi7i'\n{\"id\":21,\"name\":\"Model B\",\"description\":\"A cost-reduced version of our classic offering, providing the highest value.\",\"price\":4.99,\"createdAt\":\"2018-05-03T10:12:58.126Z\"}\nItem inserted to table: 'products-gebw40fi7i'\n{\"id\":20,\"name\":\"Model A\",\"description\":\"Our standard, highly reliable part.\",\"price\":6.99,\"createdAt\":\"2018-05-03T10:12:58.158Z\"}\nSetting policy for bucket: 'retail-gebw40fi7i.example.com'\nSetting website configuration for Bucket: 'retail-gebw40fi7i.example.com'\nCreating Role: api-gebw40fi7i-plfr8qus-iam-role-gebw40fi7i-plfr8qus\nSetting redirection for Bucket: 'www.retail-gebw40fi7i.example.com'\nSet policy and CORS for bucket 'retail-gebw40fi7i.example.com'\nCreating API Gateway: \"api-gebw40fi7i-plfr8qus\"\nCreating Site: 'retail-frontend'\nSyncing files from '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A' to bucket: 'retail-gebw40fi7i.example.com'\nREST API resources:\n  POST - https://ob7r8ppmgk.execute-api.us-east-1.amazonaws.com/dev/products\n  GET - https://ob7r8ppmgk.execute-api.us-east-1.amazonaws.com/dev/products/{id}\n  GET - https://ob7r8ppmgk.execute-api.us-east-1.amazonaws.com/dev/catalog/{...categories}\nStatic Website resources:\n  http:&#47;&#47;retail-gebw40fi7i.example.com.s3-website-us-east-1.amazonaws.com\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-60x60.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/android-icon-96x96.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-180x180.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/android-icon-48x48.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/android-icon-72x72.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/android-icon-144x144.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-114x114.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-precomposed.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/android-icon-36x36.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-152x152.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/favicon-16x16.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-76x76.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/android-icon-192x192.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-120x120.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-72x72.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-57x57.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/browserconfig.xml' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/apple-icon-144x144.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/favicon-32x32.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/favicon-96x96.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/ms-icon-144x144.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/error.html' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/favicon.ico' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/manifest.json' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/ms-icon-150x150.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/ms-icon-70x70.png' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/fonts/serverless-regular.woff2' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/index.html' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/fonts/serverless-regular.woff' ...\nUploading file: '/var/folders/w4/nnwlqs093jlcg6sn2t2t2_2r0000gn/T/tmp-44738fLC7PSPBze0A/assets/favicons/ms-icon-310x310.png' ...\nObjects Found: 0 , Files Found: 31 , Files Deleted: 0</code></pre>\n\n\n\n<p>これでWebSiteやREST APIのエンドポイントにアクセスするとちゃんとデプロイされていることが確認されているはずです。</p>\n\n\n\n<h2 class=\"wp-block-heading\">Serverless Frameworkとの統合</h2>\n\n\n\n<p>将来的にはServerless Frameworkとの統合も計画されています。そうすると以下のようにfunctionsとeventsとcomponentsが上手く定義できるようになるでしょう</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>service: my-service\n\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n\nfunctions:\n  myFunction:\n    handler: handler.myFunction\n    events:\n      - http:\n          path: api/public\n          method: post\n    environment:\n      database: ${components.myDatabase}\n\ncomponents:\n  myDatabase:\n    type: aws-dynamodb\n    inputs:\n      region: us-east-1\n      tables:\n        - name: myTable\n          hashKey: id\n          schema:\n            id: number\n            foo: string</code></pre>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>provider:\n  name: aws\n  runtime: nodejs6.10\n  region: us-east-1\n\nfunctions:\n  ...\n\ncomponents:\n  myDatabase:\n    type: aws-dynamodb\n    inputs:\n      ...\n  myTwilio:\n    type: twilio-webhook\n    inputs:\n      ...\n  myGoogleCloudVisionApi:\n    ...\n  myAuth0:\n    ...</code></pre>\n\n\n\n<p>特にFrameworkはAWS以外のproviderのfunctionとeventも定義できます。GCPやAzureのfunctionとeventを定義してそれをAWSやNetlifyといったコンポーネントとも上手くインテグレーションが出来る様になるということです。これはかなりサーバレスというもののやれることや可能性が現実的になるのではなるのでないでしょうか。</p>\n\n\n\n<h2 class=\"wp-block-heading\">関連記事</h2>\n\n\n\n<ul><li><a href=\"https://serverless.com/blog/what-are-serverless-components-how-use/\" rel=\"noreferrer noopener\" target=\"_blank\">What are Serverless Components, and how do I use them?</a></li><li><a href=\"https://serverless.com/blog/how-to-create-landing-page-with-serverless-components/\" rel=\"noreferrer noopener\" target=\"_blank\">How to create a landing page with serverless components</a></li></ul>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2018.05.03","path":"/blog/51/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2018/05/62cdc4b9-afab-9b0a-d1ca-bfc0476527b6.gif","altText":"","mediaDetails":{"width":1800}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}