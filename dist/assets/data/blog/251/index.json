{"hash":"e5bf1eed04e22915fe60df772657de15feda3786","data":{"wordPressBlog":{"title":"サーバーレスの簡易コスト予測を負荷試験から行う方法","content":"\n<p>サーバーレスアーキテクチャの料金構成は基本的に実行単位での従量課金制であるため、そのコストの予測及び見積もりは非常に難しいです。</p>\n\n\n\n<p>特に大きなトラフィックや膨大なデータ量を扱う場合には、それに応じてコストは高くなる傾向にあります。また、会社によっては経営層やエンジニアリングマネージャーに事前にコストの見積もりを求められるケースもあるでしょう。</p>\n\n\n\n<p>コストを見積もる現実的なやり方は、実際にあなたのサーバーレスアプリケーションにトラフィックをかけることで課金を発生させ、それを元に1日もしくは1ヶ月の見積もりや将来的にアクセスが増えたときのコスト予測を行うことでしょう。</p>\n\n\n\n<p>本記事ではそのやり方について解説しています。</p>\n\n\n\n<h3 class=\"wp-block-heading\">見積もり対象となるアーキテクチャ</h3>\n\n\n\n<p>以下のような構成のサーバーレスアプリケーションを考えてみましょう。<br>SQSでデータを受け付けて、最終的にKinsis Streamsを通してRDSにデータが登録されるという構成になっています。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"318\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-18.29.09-1024x318.png\" alt=\"\" class=\"wp-image-254\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-18.29.09-1024x318.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-18.29.09-300x93.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-18.29.09-768x238.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-18.29.09-1536x477.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-18.29.09-2048x636.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>このアーキテクチャの中にはリクエスト数や実行時間に応じての課金になるSQS, Lambda, Kinesis Streamsと、インスタンスを立ち上げていた時間に応じて課金になるRDSが存在します。RDSは単純に(時間) x (インスタンスサイズ)ごとの単価でコストが算出されるため、計測の対象外とします。</p>\n\n\n\n<p>課金の計測は「コスト配分タグ」を使っておこないます。つまり、計測対象のリソースにタグ付けを行い、そのコストをフィルタリング出来るようにします。</p>\n\n\n\n<p>今回は、CloudFormationでデプロイし、そこにStack Tagsとして、Key: forecasting_cost, Value: app1をそれぞれ付与しました。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"251\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-21.00.52-1024x251.png\" alt=\"\" class=\"wp-image-255\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-21.00.52-1024x251.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-21.00.52-300x73.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-21.00.52-768x188.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-21.00.52-1536x376.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-02-21.00.52-2048x501.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">コスト配分タグの設定</h3>\n\n\n\n<p>リソースにタグを付けるだけではコストは計測されません。AWS Billingのメニューからデプロイ済みのタグに対してコスト配分タグを有効化しましょう。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"608\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-03-4.27.04-1024x608.png\" alt=\"\" class=\"wp-image-257\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-03-4.27.04-1024x608.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-03-4.27.04-300x178.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-03-4.27.04-768x456.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-03-4.27.04-1536x913.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-03-4.27.04-2048x1217.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>もしあなたがAWS Organizationの機能を使ってその子アカウントでAWSリソースを動かしている場合は、一括請求の親となっているマスターアカウントにてこの設定を行ってください。</p>\n\n\n\n<p>また、コスト配分タグはこの一覧に表示されているタグの中から有効にできます。そしてこの一覧に表示されるためにはまずタグの付いたリソースをAWSにデプロイしなければなりません。さらに、デプロイ直後はこの一覧に表示されないため、確認できない場合は表示されるまでしばらく待ちましょう</p>\n\n\n\n<h3 class=\"wp-block-heading\">負荷をかけてコストを発生させる</h3>\n\n\n\n<p>コスト配分タグが付与できれば、実際に5分程度負荷をかけます。負荷を掛ける前にアプリケーションの特性からどのくらいのトラフィックが見込まれるかは想定を行いましょう。今回は仮に700RPS程度のトラフィックを想定して以下の通り負荷をかけました。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"536\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-04-0.15.12-1024x536.png\" alt=\"\" class=\"wp-image-260\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-04-0.15.12-1024x536.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-04-0.15.12-300x157.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-04-0.15.12-768x402.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-04-0.15.12-1536x804.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/11/スクリーンショット-2020-11-04-0.15.12-2048x1072.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">コストを確認して予測値を計算する</h3>\n\n\n\n<p>1日程度経てばCost Exploreからコスト配分タグでフィルタできるようになります。結果のCSVをダウンロードすると以下のような結果となりました。</p>\n\n\n\n<figure class=\"wp-block-table is-style-regular\"><table><tbody><tr><td>Kinesis($)</td><td>Lambda($)</td><td>SQS($)</td><td>CloudWatch($)</td><td>Summary($)</td></tr><tr><td>0.0052342938</td><td>0.04321226</td><td>0.0969616</td><td>0.01323</td><td>0.1586381538</td></tr></tbody></table></figure>\n\n\n\n<p>5分間負荷を掛けて$0.1454ということは1日で$0.1586 x 12(1時間) x 24(1日) = $45.69 、1ヶ月で$45.69 x 30(日) = $1,370くらいかかりそうということが分かります。</p>\n\n\n\n<p>また、RDSがdb.m5.2xlarge1台でこのトラフィックを捌けたとします。すると1日で$0.94 x 24 = $22.56、1ヶ月で$22.56 x 30 = $676.8になります。</p>\n\n\n\n<p>結果をまとめると、このアリケーションが常時700RPSのトラフィックを捌いた場合以下のようなコストがかかることが分かります。</p>\n\n\n\n<figure class=\"wp-block-table is-style-regular\"><table><tbody><tr><td></td><td>Serverless Resources($)</td><td>RDS($)</td><td>Summary($)</td></tr><tr><td>1日</td><td>45.69</td><td>22.56</td><td>68.25</td></tr><tr><td>1ヶ月</td><td>1,370</td><td>676.8</td><td>2,046.8</td></tr></tbody></table></figure>\n\n\n\n<h3 class=\"wp-block-heading\">まとめ</h3>\n\n\n\n<p>このように負荷試験を行うことで、ミニマムの料金を実際に発生させ、そこから掛け算を行うことで簡易的にコストの想定を行うことが可能となります。</p>\n\n\n\n<p>ただし、あくまで簡易的な予測であることに注意してください。常時一定のトラフィックが流れるアプリケーションはそうないでしょう。しかしながらコスト予測を顧客や上司に提示した上でビジネスを進める必要のあるケースは多いと思います。</p>\n\n\n\n<p>特にサーバーレスの場合はトラフィックボリュームが大きくなるほど、そのコストは読みづらくなります。そんな時にコストの予測を行うことでステークホルダーに対してある程度の合意を取りつつ、プロジェクトが進めやすくなるケースもあるのでは無いでしょうか。</p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2020.11.05","path":"/blog/251/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"30","title":"cost","path":"/tag/cost/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}