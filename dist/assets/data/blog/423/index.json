{"hash":"35053359aff549c8e1d81009f00eae950570ae45","data":{"wordPressBlog":{"title":"AWS Amplify を使って簡単に Algolia と連携した検索機能を作る","content":"\n<p>※この記事は現時点で Amplify の GraphQL Transformer v1 を対象としています。v2 対応については、連携に利用するライブラリのアップデート後に更新・追記を行う予定です。</p>\n\n\n\n<p>最近人気を集めている高速な全文検索サービス Algolia ですが、AWS Amplify を使って簡単に連携する仕組みができていたので紹介していきます。例えば、手掛けているプロジェクトで AWS Amplify を使ったPoC/MVPアプリケーション開発をしていて、コンテンツ検索や絞り込みの機能が必要になった際、すぐに OpenSearch を取り入れるには多少負担になるといった場合におすすめできる方法です。 </p>\n\n\n\n<h2 class=\"wp-block-heading\">Algolia とは</h2>\n\n\n\n<p>高速・高機能かつ使いやすいダッシュボード付きの全文検索 API サービスです。従量課金のSaaS型であることからサーバーレスとの相性がよく、各種SDKとすぐに利用可能なクライアントサイドのUI部品まで用意されており、検索機能を実装する上で優れた開発者経験が得られるサービスと言えます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">実現したい機能と仕組み</h2>\n\n\n\n<p>Amplify バックエンドのテンプレートでお馴染みの Blog &#8211; Post &#8211; Comment スキーマを利用して検索機能を作っていきます。Post の <code>title</code> というフィールドを Algolia に連携し、ブログ記事のタイトルを検索するイメージとして、検索窓から文字列の全文検索ができるようにします。</p>\n\n\n\n<p>具体的には、<code>@algolia</code> ディレクティブを指定した <code>@model</code> タイプの DynamoDB Streams を有効化し、レコードが追加されたら Lambda Function 経由で Algolia に登録されます。 <code>@model</code> 名に対応するインデックスがなければ自動生成されます。</p>\n\n\n\n<p>詳細は公式ドキュメントの <a rel=\"noreferrer noopener\" href=\"https://docs.amplify.aws/cli/graphql-transformer/directives/\" data-type=\"URL\" data-id=\"https://docs.amplify.aws/cli/graphql-transformer/directives/\" target=\"_blank\">Directives セクション</a>にも以下のように紹介されています。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"758\" height=\"293\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.53.40.png\" alt=\"\" class=\"wp-image-428\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.53.40.png 758w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.53.40-300x116.png 300w\" sizes=\"(max-width: 758px) 100vw, 758px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Algolia のセットアップ</h2>\n\n\n\n<p>Algolia のダッシュボードを開きます。アカウントがない場合は algolia.com を開いて作成しておきます。</p>\n\n\n\n<p>メニューから「API Keys」という項目を選択し、ここから Application ID と Search-Only API Key, Admin API Key を確認しておきます。後ほど、フロントエンドとバックエンドにそれぞれセットして利用することになります。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"1015\" height=\"545\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-11.56.43.png\" alt=\"\" class=\"wp-image-424\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-11.56.43.png 1015w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-11.56.43-300x161.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-11.56.43-768x412.png 768w\" sizes=\"(max-width: 1015px) 100vw, 1015px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Amplify プロジェクトのセットアップ</h2>\n\n\n\n<p>まずは新しく作成 or 既存のプロジェクトを開き、そこから Amplify CLI を利用して Amplify プロジェクトを展開します。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>amplify init</code></pre>\n\n\n\n<p>※Amplify CLI を利用していない場合、<a rel=\"noreferrer noopener\" href=\"https://docs.amplify.aws/cli/start/install/\" target=\"_blank\">こちらのドキュメント</a>を参考にして入れておくと便利です。また、この記事ではサンプル作成のため create-next-app で作成した Next.js プロジェクトをベースにしています。</p>\n\n\n\n<p>コマンドを実行するといくつか選択項目が出てきますが、利用環境に合わせて適宜指定する流れで問題ありません。作成が完了したら、引き続き GraphQL の API を追加します。本記事のサンプルで利用するスキーマのテンプレートは <code>One-to-many relationship (e.g., “Blogs” with “Posts” and “Comments”)</code> を選択しました。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>amplify add api</code></pre>\n\n\n\n<p>そうすると、<code>amplify/backend/api/&lt;PROJECT_NAME&gt;/schema.graphql</code> が作成され、中身を見ると以下の形になっていることが確認できます。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Blog @model {\n  id: ID!\n  name: String!\n  posts: &#91;Post] @connection(keyName: \"byBlog\", fields: &#91;\"id\"])\n}\n\ntype Post @model @key(name: \"byBlog\", fields: &#91;\"blogID\"]) {\n  id: ID!\n  title: String!\n  blogID: ID!\n  blog: Blog @connection(fields: &#91;\"blogID\"])\n  comments: &#91;Comment] @connection(keyName: \"byPost\", fields: &#91;\"id\"])\n}\n\ntype Comment @model @key(name: \"byPost\", fields: &#91;\"postID\", \"content\"]) {\n  id: ID!\n  postID: ID!\n  post: Post @connection(fields: &#91;\"postID\"])\n  content: String!\n}</code></pre>\n\n\n\n<p>ここから、<code>Post</code> の <code>title</code> に対して検索インデックスを作成するよう、<code>@algolia</code> ディレクティブを利用して以下のように指定します。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Post @model @algolia(fields:{include:&#91;\"title\"]}) @key(name: \"byBlog\", fields: &#91;\"blogID\"]) {\n  id: ID!\n  title: String!\n  blogID: ID!\n  blog: Blog @connection(fields: &#91;\"blogID\"])\n  comments: &#91;Comment] @connection(keyName: \"byPost\", fields: &#91;\"id\"])\n}</code></pre>\n\n\n\n<p>続いて、Amplify プロジェクトから定義したスキーマから Algolia 検索インデックスを作成、データ連携をしてくれるライブラリをパッケージに追加します。この記事ではその先のサンプル画面作成に必要なライブラリも合わせて記載しています。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>yarn add graphql-algolia-transformer\n\n# サンプル画面作成で利用するモジュール\nyarn add \\\naws-amplify \\\nalgoliasearch \\\nreact-instantsearch-dom \\\n@types/react-instantsearch-dom</code></pre>\n\n\n\n<p><code>transform.conf.json</code> に以下の設定を追加して先程追加したライブラリをインポートしておきます。</p>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>// amplify/backend/api/&lt;API_NAME&gt;/transform.conf.json\n// VSCodeを使っていてもしファイルが見つからない場合、.vscode/settings.json にて\n// file.exclude の \"amplify/**/transform.conf.json\" を true にすると表示される\n\n{\n  // ... \n  \"transformers\": &#91;\n    \"graphql-algolia-transformer\"\n  ]\n}</code></pre>\n\n\n\n<p>Algolia インデックス作成と連携に必要な API キーをセットします。</p>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>// /amplify/backend/api/&lt;API_NAME&gt;/parameters.json\n// 現時点では冗長でも @model ごとにこの３つの項目をそれぞれ追加しなければならない\n\n{\n  \"AlgoliaProjectIdPost\": \"SAMPLE_PROJECT\", // 連携に伴うAWSリソース及び Algolia のインデックス名に付く任意のPrefix\n  \"AlgoliaAppIdPost\": \"APP_ID\",\n  \"AlgoliaApiKeyPost\": \"ADMIN_API_KEY\",\n}</code></pre>\n\n\n\n<p>ここまでで、Amplify バックエンド側のセットアップは一通り完了しました。以下コマンドを実行して変更を反映しておきます。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>amplify push</code></pre>\n\n\n\n<p>ここからは、動作を確認するために簡単はフロントエンドの画面を作っていきます。以下サンプルで作成した動作確認用のコースコードを共有しておきます。</p>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>import algoliasearch from 'algoliasearch/lite'\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\nimport { InstantSearch, SearchBox, Hits } from 'react-instantsearch-dom'\nimport { createBlog, createPost } from '../graphql/mutations'\n\nimport awsconfig from '../aws-exports';\nAmplify.configure(awsconfig);\n\nconst searchClient = algoliasearch(APP_ID, SEARCH_API_KEY)\n\nconst TestingPage = () =&gt; {\n\n  const onClickCreateBlogBtn = () =&gt; API.graphql(graphqlOperation(createBlog, {\n    input: { name: 'testing_blog_1' }\n  }))\n\n  const onClickCreatePostBtn = () =&gt; API.graphql(graphqlOperation(createPost, {\n    input: { blogID: '&lt;BLOG_ID&gt;', title: 'testing_post_1' }\n  }))\n\n  return (\n    &lt;&gt;\n      &lt;p&gt;Spikes Amplify features&lt;/p&gt;\n      &lt;button onClick={onClickCreateBlogBtn}&gt;CreateBlog&lt;/button&gt;\n      &lt;button onClick={onClickCreatePostBtn}&gt;CreatePost&lt;/button&gt;\n      &lt;div&gt;\n        &lt;InstantSearch indexName=\"SAMPLE_PROJECT-post-dev\" searchClient={searchClient}&gt;\n          &lt;SearchBox /&gt;\n          &lt;Hits /&gt;\n        &lt;/InstantSearch&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default TestingPage</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">画面の確認</h2>\n\n\n\n<p>まず Blog のレコードを作成し、次に <code>testing_blog_1</code> という title で Post のレコードを作成します。DynamoDB の Post テーブルにはこういう形でレコードが登録されます。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"937\" height=\"91\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.42.14.png\" alt=\"\" class=\"wp-image-426\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.42.14.png 937w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.42.14-300x29.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.42.14-768x75.png 768w\" sizes=\"(max-width: 937px) 100vw, 937px\" /></figure>\n\n\n\n<p>その後すぐに Algolia に連携され、ダッシュボードから検索可能な形でインデックスが登録されていることが確認できます。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"523\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.37.05-1024x523.png\" alt=\"\" class=\"wp-image-425\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.37.05-1024x523.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.37.05-300x153.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.37.05-768x392.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.37.05.png 1062w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>最後に、サンプルで作成した画面で実際に検索が動作することを確認します。<code>title</code> フィールドに指定した文字列の最初の数文字を打った時点ですでに検索結果が表示されるようになります。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"817\" height=\"137\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.36.12.png\" alt=\"\" class=\"wp-image-427\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.36.12.png 817w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.36.12-300x50.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-23-at-21.36.12-768x129.png 768w\" sizes=\"(max-width: 817px) 100vw, 817px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">おわりに</h2>\n\n\n\n<p>いくつか細かい設定を必要とするため多少手間に感じることもあるかと思いますが、実際にやってみると多くの時間をかけることなく検索機能を実現できる方法となります。標準の OpenSearch を利用することも有効な選択肢ではありますが、Algolia を利用することで監視項目や管理対象のAWSリソースを減らし、従量課金のメリットを享受できるため、一度検討してみてはいかがでしょうか。</p>\n","author":{"name":"Sonu Kim","description":"","avatars":{"avatar96":"https://secure.gravatar.com/avatar/5b527696e38c84c34048954d767b1537?s=96&d=mm&r=g"},"acf":{"userJpName":"金 仙優","userRole":"COO","facebook":"","twitter":"","github":""}},"date":"2021.11.24","path":"/blog/423/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"52","title":"Algolia","path":"/tag/algolia/"},{"id":"53","title":"Amplify","path":"/tag/amplify/"},{"id":"54","title":"GraphQL","path":"/tag/graphql/"},{"id":"2","title":"Serverless","path":"/tag/serverless/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}