{"hash":"35053359aff549c8e1d81009f00eae950570ae45","data":{"wordPressBlog":{"title":"AWS Amplify GraphQL Transformer v2 のデータモデリングとリレーションの仕組みを解説する","content":"\n<p>この記事は <a href=\"https://qiita.com/advent-calendar/2022/amplify\" data-type=\"URL\" data-id=\"https://qiita.com/advent-calendar/2022/amplify\" target=\"_blank\" rel=\"noreferrer noopener\">AWS AmplifyとAWS×フロントエンド Advent Calendar 2022</a> 22日目の記事です。</p>\n\n\n\n<p>AWS Amplify は主にプロトタイプやMVPを開発する際、作りたいと思ったものをクイックに実装できる便利なサービスです。フロントエンドはAmplify Hostingを利用することでホスティング作業が非常に簡単になりました。また、<a rel=\"noreferrer noopener\" href=\"https://github.com/aws-amplify/amplify-js\" data-type=\"URL\" data-id=\"https://github.com/aws-amplify/amplify-js\" target=\"_blank\">amplify-jsライブラリ</a>を利用すれば、AWS SDKのみを利用するよりも、効率よくAWSの各サービスに連携することが可能になっています。Figmaとの連携など、Amplify Studioを活用する場面もあるかと思います。</p>\n\n\n\n<p>一方、バックエンドについても、GraphQLモードの場合、AppSyncとDynamoDBを利用したオススメの構成を自動生成してくれます。上手く使えばとても役立ちますが、従来まではデータモデリングを含め実現方法のコツを試行錯誤しながら覚える必要がありました。</p>\n\n\n\n<p>そんな中、昨年末GraphQL Transformer V2が発表され、特にデータモデル間のリレーション定義が簡潔に書けるようになりました。基本的な部分さえ押さえれば、実践的に活用または応用することが以前よりやりやすくなりました。</p>\n\n\n\n<p>この記事では、新しいデータモデリングのリレーション定義にフォーカスして、<a rel=\"noreferrer noopener\" href=\"https://docs.amplify.aws/cli/graphql/data-modeling\" data-type=\"URL\" data-id=\"https://docs.amplify.aws/cli/graphql/data-modeling\" target=\"_blank\">公式ドキュメント</a>に基づき新しく追加された４つのディレクティブ（ <code>@hasOne</code>, <code>@hasMany</code>, <code>@belongsTo</code>, <code>@manyToMany</code> ）の基本的な使い方について解説します。合わせて、自動生成される仕組みのイメージができるように、DynamoDBの使われ方についても紹介していきます。</p>\n\n\n\n<h2 class=\"wp-block-heading\"><code>@hasOne</code> &#8211; 2つのモデル間に一方向の 1:1 リレーションを作成</h2>\n\n\n\n<p>まず、あるプロジェクトとそのプロジェクトを推進するチームがあるとします。また、プロジェクトの担当チームを取得するクエリーを書きたいと想定します。ここで、例えば「各プロジェクトを担当するチームは１つのみ」という仕様がある場合、以下のようにスキーマを定義します。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Project @model {\n  id: ID!\n  name: String\n  team: Team @hasOne\n}\n\ntype Team @model {\n  id: ID!\n  name: String!\n}</code></pre>\n\n\n\n<p>amplify push でデプロイしてレコードを登録してみると、以下のようにDynamoDBがセットされます。</p>\n\n\n\n<h4 class=\"wp-block-heading\">Project テーブル</h4>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"118\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/1_sec1_Project_Table-1-1024x118.png\" alt=\"\" class=\"wp-image-534\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/1_sec1_Project_Table-1-1024x118.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/1_sec1_Project_Table-1-300x34.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/1_sec1_Project_Table-1-768x88.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/1_sec1_Project_Table-1.png 1036w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p><code>@hasOne</code> ディレクティブは、Teamのレコードを引くための ID （ <code>proejctTeamId</code> ） がスキーマに自動追加されます。この項目に担当TeamのID（ <code>team_1</code> ）を登録することで、ProjectからTeamのレコードが取得できるようになります。</p>\n\n\n\n<h4 class=\"wp-block-heading\">Team テーブル</h4>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"862\" height=\"113\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/2_sec1_Team_Table.png\" alt=\"\" class=\"wp-image-535\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/2_sec1_Team_Table.png 862w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/2_sec1_Team_Table-300x39.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/2_sec1_Team_Table-768x101.png 768w\" sizes=\"(max-width: 862px) 100vw, 862px\" /></figure>\n\n\n\n<h4 class=\"wp-block-heading\">「プロジェクトの担当チームを取得する」クエリーのサンプル</h4>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"574\" height=\"301\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/3_sec1_Query_Sample-3.png\" alt=\"\" class=\"wp-image-552\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/3_sec1_Query_Sample-3.png 574w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/3_sec1_Query_Sample-3-300x157.png 300w\" sizes=\"(max-width: 574px) 100vw, 574px\" /></figure>\n\n\n\n<p>このように、 <code>@hasOne</code> ディレクティブは 1:1 の関係にあるレコードのリレーションを定義し、解決するリゾルバーを生成してくれます。</p>\n\n\n\n<h2 class=\"wp-block-heading\"><code>@hasMany</code> &#8211; ２つのモデル間に、一方向の 1:N リレーションを作成</h2>\n\n\n\n<p>ここでは、ブログの記事（ <code>Post</code> ）と、その記事についているコメント欄（ <code>Comment</code> ）があるとします。また、記事とその記事に投稿されているコメント一覧を一気に取得するクエリーを書くと想定します。「一つの記事」に対して「複数のコメント」がある構成を表現する場合、以下のようにスキーマを定義します。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Post @model {\n  id: ID!\n  title: String!\n  comments: &#91;Comment] @hasMany\n}\n\ntype Comment @model {\n  id: ID!\n  content: String!\n}</code></pre>\n\n\n\n<p>amplify push でデプロイしてレコードを登録してみると、以下のようにDynamoDBがセットされます。</p>\n\n\n\n<h4 class=\"wp-block-heading\">Post テーブル</h4>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"873\" height=\"119\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/4_sec2_Post_Table-1.png\" alt=\"\" class=\"wp-image-540\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/4_sec2_Post_Table-1.png 873w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/4_sec2_Post_Table-1-300x41.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/4_sec2_Post_Table-1-768x105.png 768w\" sizes=\"(max-width: 873px) 100vw, 873px\" /></figure>\n\n\n\n<h4 class=\"wp-block-heading\">Comment テーブル</h4>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"166\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/5_sec2_Comment_Table-1024x166.png\" alt=\"\" class=\"wp-image-541\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/5_sec2_Comment_Table-1024x166.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/5_sec2_Comment_Table-300x49.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/5_sec2_Comment_Table-768x125.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/5_sec2_Comment_Table.png 1047w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p><code>@hasMany</code> の場合、Many（多）になる側（＝Commentテーブル）にマッピング項目が追加され、以下のようにGSI-PKインデックスが自動生成された状態になります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"194\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/6_sec2_Comment_Table_GSI-1024x194.png\" alt=\"\" class=\"wp-image-542\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/6_sec2_Comment_Table_GSI-1024x194.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/6_sec2_Comment_Table_GSI-300x57.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/6_sec2_Comment_Table_GSI-768x146.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/6_sec2_Comment_Table_GSI.png 1113w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>これにより、以下のようなクエリーを書くことができるようになります。<code>postCommentsId</code> に指定されているPostのIDがGSI-PKとして使われます。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"623\" height=\"487\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/7_sec2_Query_sample_1-2.png\" alt=\"\" class=\"wp-image-553\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/7_sec2_Query_sample_1-2.png 623w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/7_sec2_Query_sample_1-2-300x235.png 300w\" sizes=\"(max-width: 623px) 100vw, 623px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\"><code>belongsTo</code> &#8211; 2つのモデルの間に、双方向で 1:1 または 1:N のリレーションを作成</h2>\n\n\n\n<p>簡単にいうと <code>@hasOne</code> または <code>@hasMany</code> で指定したモデルを、逆方向でも取得できるようにするものです。</p>\n\n\n\n<p>例えば、<code>@hasOne</code> で指定したProjectとTeamの関係では、「Project」を指定して「Team」を取得する形でした。もし「Team」から「Project」を取得するクエリーを書きたくなった場合、以下のようにスキーマを定義します。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Project @model {\n  id: ID!\n  name: String\n  team: Team @hasOne\n}\n\ntype Team @model {\n  id: ID!\n  name: String!\n  # project フィールドを追加、@belongsTo を指定することでTeamからもProjectを引けるようになる\n  project: Project @belongsTo\n}</code></pre>\n\n\n\n<p>amplify push でデプロイしてTeamのレコードにProjectを登録してみます。</p>\n\n\n\n<h4 class=\"wp-block-heading\">Team テーブル</h4>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"120\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/9_sec3_Team_Table-1024x120.png\" alt=\"\" class=\"wp-image-545\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/9_sec3_Team_Table-1024x120.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/9_sec3_Team_Table-300x35.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/9_sec3_Team_Table-768x90.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/9_sec3_Team_Table.png 1032w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p><code>teamProjectId</code> という項目がスキーマに自動追加されますので、ここにProjectのIDを指定することで、<code>@hasOne</code> パターンとは逆の方向からProjectを取得できるようになります。</p>\n\n\n\n<p>以下、クエリーのサンプルです。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"582\" height=\"307\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/10_sec3_Team_Query_Sample-1.png\" alt=\"\" class=\"wp-image-554\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/10_sec3_Team_Query_Sample-1.png 582w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/10_sec3_Team_Query_Sample-1-300x158.png 300w\" sizes=\"(max-width: 582px) 100vw, 582px\" /></figure>\n\n\n\n<p>このように、Teamから紐付いているProjectのレコードを引けるようになります。</p>\n\n\n\n<p>※マッピング用の項目名（ &#8220;projectTeamId&#8221; など）が紛らわしくて気になる方は、<a rel=\"noreferrer noopener\" href=\"https://docs.amplify.aws/cli/graphql/data-modeling/#belongs-to-relationship\" data-type=\"URL\" data-id=\"https://docs.amplify.aws/cli/graphql/data-modeling/#belongs-to-relationship\" target=\"_blank\">公式ドキュメント</a>にて任意のキー名を指定する方法がありますので是非ご参照ください。</p>\n\n\n\n<p>続いて、<code>@hasMany</code> の場合、PostからComment一覧を取得する形でした。もし、Commentを指定してそのコメントが紐付いているPostを見つけたくなった場合、以下のようにスキーマを定義します。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Post @model {\n  id: ID!\n  title: String!\n  comments: &#91;Comment] @hasMany\n}\n\ntype Comment @model {\n  id: ID!\n  content: String!\n  # project フィールドを追加、@belongsTo を指定することでCommentからもPostを引けるようになる\n  post: Post @belongsTo\n}</code></pre>\n\n\n\n<p>これを amplify push でデプロイすると、以下のようにpostが引けるようになります。スキーマとリゾルバが自動追加され、DynamoDBの構成には変更ありません。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"582\" height=\"300\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/11_sec3_Comment_Query_After-1.png\" alt=\"\" class=\"wp-image-555\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/11_sec3_Comment_Query_After-1.png 582w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/11_sec3_Comment_Query_After-1-300x155.png 300w\" sizes=\"(max-width: 582px) 100vw, 582px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\"><code>@manyToMany</code> &#8211; ２つのモデルの N:N リレーションを作成</h2>\n\n\n\n<p>２つのモデルを Joint する対応が必要になるケースです。例えば、記事（ <code>Post</code> ）にタグ付け（ <code>Tag</code> ）を行うとし、以下のような状態を考えてみます。</p>\n\n\n\n<ul><li>タグは「タグA」「タグB」「タグC 」の３種類がある</li></ul>\n\n\n\n<ul><li>「記事A」には「タグA」と「タグB」が指定されている</li></ul>\n\n\n\n<ul><li>「記事B」には「タグB」と「タグC」が指定されている</li></ul>\n\n\n\n<p>この状態で、以下２つのユースケースがあると想定します。</p>\n\n\n\n<ul><li>「記事A」に指定されているタグの一覧を取得する</li><li>「タグB」が指定されている記事の一覧を取得する</li></ul>\n\n\n\n<p>これらを実現するためのスキーマは以下のように定義します。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Post @model {\n  id: ID!\n  title: String!\n  comments: &#91;Comment] @hasMany\n  # tags フィールドを追加、relationNameを指定（Jointテーブルの名前になります）\n  tags: &#91;Tag] @manyToMany(relationName: \"PostTags\")\n}\n\ntype Tag @model {\n  id: ID!\n  label: String!\n  # tags フィールドを作成、relationNameを指定（Jointテーブルの名前になります）\n  posts: &#91;Post] @manyToMany(relationName: \"PostTags\")\n}</code></pre>\n\n\n\n<p>amplify push でデプロイすると、以下のように Joint に対応するための中間テーブルが作成され、PostとTagのマッピングを登録します。GraphQL Transformer V1ではこの中間テーブルを自前で定義する必要がありましたが、V2では中間テーブルを自動作成してくれるようになりました。</p>\n\n\n\n<h4 class=\"wp-block-heading\">PostTags テーブル</h4>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"1006\" height=\"269\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.43.png\" alt=\"\" class=\"wp-image-549\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.43.png 1006w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.43-300x80.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.43-768x205.png 768w\" sizes=\"(max-width: 1006px) 100vw, 1006px\" /></figure>\n\n\n\n<p>PostとTagの両方からマッピングの一覧を取得できるようにするために、それぞれのGSIが自動作成されます。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"987\" height=\"254\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.14.png\" alt=\"\" class=\"wp-image-548\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.14.png 987w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.14-300x77.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.29.14-768x198.png 768w\" sizes=\"(max-width: 987px) 100vw, 987px\" /></figure>\n\n\n\n<p>Postに紐付いているタグの一覧を取得する場合、以下のようにクエリーを書くことができます。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"735\" height=\"517\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.25.03-1.png\" alt=\"\" class=\"wp-image-556\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.25.03-1.png 735w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.25.03-1-300x211.png 300w\" sizes=\"(max-width: 735px) 100vw, 735px\" /></figure>\n\n\n\n<p>同じく、Tagに紐付いているPostの一覧を取得する場合、以下のようにクエリーを書くことができます。</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"648\" height=\"521\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.28.31-2.png\" alt=\"\" class=\"wp-image-558\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.28.31-2.png 648w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-21-at-22.28.31-2-300x241.png 300w\" sizes=\"(max-width: 648px) 100vw, 648px\" /></figure>\n\n\n\n<p>注意点としては、中間テーブルに独自の項目を追加することはできないので、もし付帯情報の追加など中間テーブルをカスタマイズしたくなった場合は <code>@hasMany</code> &lt;&gt; <code>@belongsTo</code> パターンを利用して「PostTags」テーブルを自前で定義する必要があります。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Post @model {\n  id: ID!\n  title: String!\n  content: String\n  tags: &#91;PostTags] @hasMany\n}\n\ntype Tag @model {\n  id: ID!\n  label: String!\n  posts: &#91;PostTags] @hasMany\n}\n\ntype PostTags @model {\n  id: ID!\n  post: Post @belongsTo\n  tag: Tag @belongsTo\n  # ...\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">まとめ</h2>\n\n\n\n<ul><li>AWS Amplify バックエンド（GraphQL）のデータモデリングは、大きく４つのリレーションタイプ（ <code>@hasOne</code>, <code>@hasMany</code>, <code>@belongsTo</code>, <code>@manyToMany</code> ）を指定することができる</li><li>各タイプに応じてAppSyncのスキーマ・リゾルバー・DynamoDBのテーブルが自動生成される</li><li>効率よく開発を行うためには、アクセスパターンやユースケースに応じてスキーマ定義を行う</li></ul>\n\n\n\n<p>いかがだったでしょうか。以前に比べればやりやすくなったものの、まだまだ覚えることが多いと感じられたかもしれません。ですが、基本的な仕組みをある程度理解しておくことで、結果的にゼロベースで設定または設計を行うよりも手間の削減につながることがあるのではないでしょうか。</p>\n\n\n\n<p><a href=\"https://aws.amazon.com/jp/blogs/news/export-amplify-backends-to-cdk-and-use-with-existing-deployment-pipelines/\" data-type=\"URL\" data-id=\"https://aws.amazon.com/jp/blogs/news/export-amplify-backends-to-cdk-and-use-with-existing-deployment-pipelines/\">Amplifyで構築したリソースをCDKへエクスポート</a>するといったことも可能になりましたので、是非一度Amplifyを活用してみてください！</p>\n","author":{"name":"Sonu Kim","description":"","avatars":{"avatar96":"https://secure.gravatar.com/avatar/5b527696e38c84c34048954d767b1537?s=96&d=mm&r=g"},"acf":{"userJpName":"金 仙優","userRole":"COO","facebook":"","twitter":"","github":""}},"date":"2022.12.21","path":"/blog/532/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"53","title":"Amplify","path":"/tag/amplify/"},{"id":"19","title":"Appsync","path":"/tag/appsync/"},{"id":"14","title":"DynamoDB","path":"/tag/dynamodb/"},{"id":"54","title":"GraphQL","path":"/tag/graphql/"},{"id":"2","title":"Serverless","path":"/tag/serverless/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}