{"hash":"d3dc5a74472b579ca6ae7ca671dc4f013853a504","data":{"wordPressBlog":{"title":"RDSとDynamoDBの違いとは？AWSのサーバーレスにおけるデータベースの上手な使い分け(前編)","content":"\n<p>2019年12月のAWSのリリースでLambdaからRDSを使う際の問題点であったコールドスタートとコネクション数の問題は解決されました。<br><br>この問題点の詳細はAWSのSAである西谷さんの<a href=\"https://www.keisuke69.net/entry/2017/06/21/121501\">なぜAWS LambdaとRDBMSの相性が悪いかを簡単に説明する</a> の記事で述べられてますので興味ある方は読んでみてください。</p>\n\n\n\n<p>これまでは多くのケースにおいてDynamoDBをサーバーレスアーキテクチャのデータベースとして検討することがファーストチョイスとなっていましたが、今はユースケースに応じてどちらでも選択することが出来ます。</p>\n\n\n\n<p>このタイミングで改めてサーバーレスアーキテクチャにおけるデータベース選定をどのように行えばよいのか考えてみましょう。</p>\n\n\n\n<h2 class=\"wp-block-heading\">データベースとしての構造上の違い</h2>\n\n\n\n<p>まずはRDSとDynamoDBの使い分けを考えるにあたってそれぞれのデータベースとしての構造上に違いを整理しましょう</p>\n\n\n\n<h3 class=\"wp-block-heading\">RDSの特徴</h3>\n\n\n\n<h4 class=\"wp-block-heading\">常に一貫性を保証する仕組みであること</h4>\n\n\n\n<p>DynamoDBと比較したときの一番大きな特徴は、RDSはリレーショナルデータベース(RDB)であることでしょう。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"133\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-12.25.07-1-1024x133.png\" alt=\"\" class=\"wp-image-234\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-12.25.07-1-1024x133.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-12.25.07-1-300x39.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-12.25.07-1-768x100.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-12.25.07-1-1536x199.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-12.25.07-1-2048x266.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>RDBはデータを列と行で成り立つ2次元な表形式である「テーブル」で表現し、クライアントからは強力なクエリ言語であるSQLを通してデータにアクセスします。このSQLによる操作とトランザクションの機構により、どのクライアントから見ても操作するデータが必ず同じ状態であることを保証します(一貫性)。そして、CommitやRollbackの操作を通してトランザクションが途中で失敗して中途半端な状態にならず、完全に失敗するか成功するかのどちらかであることを保証します(原子性)。</p>\n\n\n\n<p>これらの特性を通して常にデータに整合性が取れていることを保証し、データベースとしての信頼性を担保します。</p>\n\n\n\n<h4 class=\"wp-block-heading\">RDSのスケールの限界</h4>\n\n\n\n<p>しかし、大量にアクセスのある環境下においては、この特性がボトルネックになってしまいます。</p>\n\n\n\n<p>読み取り性能のパフォーマンスと耐久性を向上させるためにリードレプリカでスケールアウトさせる構成を取ることが一般的でしょう。また、書き込み含めた性能を担保するためにデータを複数のノードに分けて分散配置することで、データベースへのリクエストを分散させてスループットを向上させるシャーディングといった手法を取られることもあります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"354\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.16.48-1024x354.png\" alt=\"\" class=\"wp-image-239\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.16.48-1024x354.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.16.48-300x104.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.16.48-768x266.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.16.48-1536x532.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.16.48.png 1780w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>しかし、データベースのノードが分散された状態で一貫性を確保するためには、ノード間で常にデータの同期を取る必要が出てくるため、その仕組は非常に複雑で困難なものになってきます。</p>\n\n\n\n<p>つまり、RDBの仕組みを使い一貫性を保証するためには共有のストレージである必要があり、分散ストレージを使って水平方向にスケールすることは限界があるのです。</p>\n\n\n\n<p>RDSはその高い一貫性を実現するための仕組みと引き換えにスケーラビリティには天井が存在すると考えていいでしょう。</p>\n\n\n\n<h3 class=\"wp-block-heading\">DynamoDBの特徴</h3>\n\n\n\n<h4 class=\"wp-block-heading\">データの分散配置による可用性と拡張性の確保</h4>\n\n\n\n<p>DynamoDBは、多くのトラフィックを捌くことが出来るように、データをパーティションに分散配置し、それによってスループットを向上させる仕組みとなっています。</p>\n\n\n\n<p>データは、そのパーティションキーに対してハッシュ関数を実行することで配置先のパーティションが決定されます。そして、パーティションあたりの性能は予め決まっていため、スケールさせるためにはデータが均一に各パーティションに分散できるようにキー設計を行う必要があります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"522\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.49.51-1024x522.png\" alt=\"\" class=\"wp-image-242\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.49.51-1024x522.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.49.51-300x153.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.49.51-768x392.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.49.51-1536x783.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.49.51-2048x1045.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>さらにデータが増えてもパーティションはAWSが自動で追加してくれて、オンデマンドで再配置してくれます。つまり、自動かつAWSの制約の範囲内で無限にスケールアウトしてくれる仕組みになっています。</p>\n\n\n\n<h4 class=\"wp-block-heading\">結果整合性モデルの採用</h4>\n\n\n\n<p>データの操作に関しては結果整合性モデルが基本となっており、常に一貫性を保証するわけではありません(強い整合性を選べるオプションもある)。そして、最終的には非同期でデータセンター間でコピーされて一貫性のある状態になります(Eventual Consistancy)。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"223\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.17.43-1024x223.png\" alt=\"\" class=\"wp-image-240\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.17.43-1024x223.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.17.43-300x65.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.17.43-768x168.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.17.43-1536x335.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-28-19.17.43.png 1604w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>このように一貫性を弱めることで、データが分散ストレージに配置出来るようになり、結果としてスケールアウトすることを容易にしています。</p>\n\n\n\n<p>DynamoDBは性能を重視するために強い一貫性を捨てているというわけですね。ここはRDSのデータベースとしての特性を考えた時の大きな違いとなります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">つまり</h2>\n\n\n\n<p>ざっくり構造上は以下のような違いがあり、作るアプリケーションの特性に合わせてデータベースを選定するのは1つの良いやり方です。</p>\n\n\n\n<ul><li>RDSは強い一貫性を保つためにそのスケール性能には限界がある</li><li>DynamoDBは一貫性を弱めることでスケール性能は理論上無限大である</li></ul>\n\n\n\n<p>例えば、IoTで大量トラフィックのデータを捌く場合には一貫性を捨ててでも性能を重視したいケースがほとんどでしょうし、口座間取引のように確実にデータに不整合が発生しては行けない場合は一貫性を重視すべきでしょう。</p>\n\n\n\n<p>しかし、選定理由にはこれ以外のファクターもあります。<a href=\"https://serverless.co.jp/blog/243/\">後編</a>の記事ではさらに現実的な側面から使い分けについて述べてみます。</p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2020.10.28","path":"/blog/232/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"14","title":"DynamoDB","path":"/tag/dynamodb/"},{"id":"31","title":"RDS","path":"/tag/rds/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}