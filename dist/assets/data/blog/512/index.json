{"hash":"51bbfd82cb20fb429b7eb8047edc7c53796980aa","data":{"wordPressBlog":{"title":"AWS Lambda + Nuxt3で実現する「サーバーレスなSSR」とその構成","content":"\n<p>この記事は<a href=\"https://qiita.com/advent-calendar/2022/lambda\" data-type=\"URL\" data-id=\"https://qiita.com/advent-calendar/2022/lambda\" target=\"_blank\" rel=\"noreferrer noopener\">AWS LambdaとServerless Advent Calendar 2022</a>の15日目の記事です。</p>\n\n\n\n<p>フロントエンドの開発トレンドが多様化しています。JSをクライアントのブラウザでのみ実行するCSR（Client-side rendering）及びSPA（Single page application）のような開発構成に続き、近年ではサーバーサイドからJSを利用して動的にHTMLを生成するSSR（Server-side rendering）フレームワークの利用が浸透するようになりました。例えばReactではNext.js、VueではNuxt.jsがあります。</p>\n\n\n\n<p>アプリケーションの目的や性質によって適切な技術選定を行うことは当然のことですが、様々なニーズに合わせて自由度高くアプリケーションを開発する必要が出てくることも多いのではないでしょうか。</p>\n\n\n\n<p>この記事ではAWS環境での「サーバーレスなSSR」として、AWS Lambda を使って Nuxt3 アプリケーションを動かす構成を紹介します。Next.jsに関してはAWS Amplifyを利用する選択肢がありますが、この記事ではAWS Lambdaを直接指定してビルドとデプロイが可能になった最新のNuxt3を使って説明していきます。</p>\n\n\n\n<p>Nuxt2の経験がある方は是非キャッチアップしていただき、Nuxt自体よく分からないという方でも、「コンテナを使わなくても、AWS LambdaでSSRフレームワークが動くのね」という観点で読んでいただけますと幸いです。</p>\n\n\n\n<p>この記事を作成している時点（2022/12/14）での最新のNuxt3ではSPA/SSGを想定した静的アセットでのビルドも可能ですが、基本的には Universal Rendering（初回SSR実行、以降CSR）がおすすめです。また、Nuxt3はNitroという新しいエンジンを利用したビルドと実行を行い、ビルドターゲットとしてAWS Lambda がサポートされています。expressに依存せず軽便に扱えるので、エッジコンピューティングの恩恵を受けることも狙いとされています（※<a rel=\"noreferrer noopener\" href=\"https://nuxt.com/docs/guide/concepts/rendering/#rendering-on-cdn-edge-workers\" target=\"_blank\">Rendering on CDN Edge Workers</a>）。</p>\n\n\n\n<p>総じてNuxt2のSPAよりも優れた開発経験となることが多いので、是非一度お試しいただければと思います。</p>\n\n\n\n<h2 class=\"wp-block-heading\">構成の概要</h2>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/img_1-1.png\" alt=\"\" class=\"wp-image-514\" width=\"549\" height=\"245\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/img_1-1.png 721w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/img_1-1-300x134.png 300w\" sizes=\"(max-width: 549px) 100vw, 549px\" /></figure></div>\n\n\n\n<p>基本的にはCloudFrontのエンドポイントからリクエストを受け、SSRの実行と静的ファイルのパスを振り分ける対応を行います。Lambdaに関しては今年リリースされたFunction URLを設定することで、シンプルな形としてCloudFrontと連携できます。もしLambdaの機能を使いこなす必要がなく、機能が限定される等の制約を気にしなくて良い場合、Lambda@Edgeでレンダリングを行う構成もあります。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"521\" height=\"221\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/img_2-1.png\" alt=\"\" class=\"wp-image-516\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/img_2-1.png 521w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/img_2-1-300x127.png 300w\" sizes=\"(max-width: 521px) 100vw, 521px\" /></figure></div>\n\n\n\n<p>また、API Gateway のエンドポイントを利用するパターンがあります。開発するアプリケーションによっては、CloudFront を置くほどのものでもなかったり、クライアント証明を導入する必要があったり、細かいアクセス制御を行いたいケースがあります。具体的には空ページを１枚挟んでアプリ間連携を行ったり、ちょっとした設定を行う１枚画面などのユースケースもあるかと思います。</p>\n\n\n\n<p>Lambdaから直接静的ファイルのアセットを配信することも可能で、REST API・HTTP API 両方のモードで動作します。Lambda proxy integration で統合することで特別な設定を行わなくてもつながるので、最も構築が簡単な構成になります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">Nuxt3 アプリケーションを準備する</h2>\n\n\n\n<p>それでは、実際に構築を行ってみます。まずはサンプルとなるNuxt3アプリケーションのプロジェクトを生成します。</p>\n\n\n\n<pre class=\"wp-block-code language-shellsession\"><code>npx nuxi init sample-lambda-ssr-project</code></pre>\n\n\n\n<p><code>nuxt.config.ts</code> にビルド設定を追記します。nuxt2 を使われた経験がある方は馴染みのある設定ファイルではないでしょうか。個人的にはここで <code>aws-lambda</code> という設定が書けるだけでもテンションが上りました(^^)</p>\n\n\n\n<pre class=\"wp-block-code language-TypeScript\"><code>export default defineNuxtConfig({\n  // ...config\n  nitro: {\n    preset: 'aws-lambda',\n    serveStatic: false,\n  }\n})</code></pre>\n\n\n\n<p>また、静的ファイルの配信を確認するため、画像を1枚追加しておきます。<code>public</code> ディレクトリに画像を追加し、画像を表示するページも作成します。</p>\n\n\n\n<p>※Nuxt2での <code>static</code> は、Nuxt3になって <code>public</code> に変わっています。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.36.07.png\" alt=\"\" class=\"wp-image-518\" width=\"451\" height=\"320\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.36.07.png 575w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.36.07-300x213.png 300w\" sizes=\"(max-width: 451px) 100vw, 451px\" /></figure></div>\n\n\n\n<p>ここまで準備ができたら、ビルドをしてデプロイするアセットを作成します。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.50.53-1024x395.png\" alt=\"\" class=\"wp-image-526\" width=\"662\" height=\"255\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.50.53-1024x395.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.50.53-300x116.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.50.53-768x297.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.50.53-1536x593.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.50.53.png 1590w\" sizes=\"(max-width: 662px) 100vw, 662px\" /></figure></div>\n\n\n\n<p>問題なく完了すれば、<code>.output</code> ディレクトリにデプロイする対象のファイルが生成されていることを確認できます。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.49.22.png\" alt=\"\" class=\"wp-image-527\" width=\"597\" height=\"359\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.49.22.png 1005w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.49.22-300x181.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.49.22-768x462.png 768w\" sizes=\"(max-width: 597px) 100vw, 597px\" /></figure></div>\n\n\n\n<h2 class=\"wp-block-heading\">デプロイの設定</h2>\n\n\n\n<p>Serverless Framework を利用してLambdaへデプロイを行います。 以下のコマンドでパッケージを追加します。</p>\n\n\n\n<pre class=\"wp-block-code language-shellsession\"><code>yarn add -D serverless</code></pre>\n\n\n\n<p><code>serverless.yml</code> ファイルを作成し、以下の設定を書いておきます。</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>service: sample-lambda-ssr-nuxt3\nframeworkVersion: '3'\nprovider:\n  name: aws\n  stage: dev\n  region: ap-northeast-1\n\npackage:\n  patterns:\n    - '!**'\n    - '.output/server/**'\n\nfunctions:\n  NuxtSsrCore:\n    runtime: nodejs16.x\n    handler: '.output/server/index.handler'\n    url: true</code></pre>\n\n\n\n<p>以下のコマンドで Lambda をデプロイします。</p>\n\n\n\n<pre class=\"wp-block-code language-shellsession\"><code>yarn sls deploy</code></pre>\n\n\n\n<p>続いて、画像を配置するS3バケットと、CloudFront Distributionを作成します。振り分けの設定については、CloudFrontのBehaviorを以下のように設定します。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"304\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.42.56-1024x304.png\" alt=\"\" class=\"wp-image-519\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.42.56-1024x304.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.42.56-300x89.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.42.56-768x228.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.42.56.png 1109w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>S3バケットにはビルド済みアセット<code>.output</code>の中から、<code>public</code> 以下のファイルをアップロードしておきます。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"616\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.46.52-1024x616.png\" alt=\"\" class=\"wp-image-520\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.46.52-1024x616.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.46.52-300x180.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.46.52-768x462.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.46.52.png 1244w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>以下のようなAWS CLI コマンドをnpm scripts に登録しておくと簡単にアップロード作業の自動化を行うことができます。</p>\n\n\n\n<pre class=\"wp-block-code language-shellsession\"><code>aws s3 sync .output/public s3://{静的ファイルのオリジンS3バケット名}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">動作確認</h2>\n\n\n\n<p>CloudFrontのURLを開き、実際にアプリケーションが動作する様子と指定した静的ファイル（写真）の取得が反映されているか確認します。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.03.31-1-1024x660.png\" alt=\"\" class=\"wp-image-523\" width=\"581\" height=\"374\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.03.31-1-1024x660.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.03.31-1-300x193.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.03.31-1-768x495.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.03.31-1.png 1153w\" sizes=\"(max-width: 581px) 100vw, 581px\" /></figure></div>\n\n\n\n<p>ブラウザの Developer Tool から Network タブを開き、意図した通りに必要なアセットが読み込まれていることを確認します。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.59.39-1024x515.png\" alt=\"\" class=\"wp-image-524\" width=\"749\" height=\"376\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.59.39-1024x515.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.59.39-300x151.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.59.39-768x387.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-20.59.39.png 1506w\" sizes=\"(max-width: 749px) 100vw, 749px\" /></figure></div>\n\n\n\n<p>URLを開いた後、Lambda コンソールのモニタリングタブから、呼び出し回数等を確認することができます。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.01.56-1024x441.png\" alt=\"\" class=\"wp-image-525\" width=\"758\" height=\"325\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.01.56-1024x441.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/12/Screen-Shot-2022-12-14-at-21.01.56-300x129.png 300w\" sizes=\"(max-width: 758px) 100vw, 758px\" /></figure></div>\n\n\n\n<p>東京リージョンの場合、Lambdaのメモリサイズとコールドスタート時のレイテンシーは256MBで2〜3s、512MBで1〜2s程度、1GBで1s未満となりほぼ影響を受けなくなります。ただし256MBでも2回目以降の実行では100ms-200msとかなり早くなりますので、アプリケーションの用途や実装にもよりますがLambdaの性能もさほど問題にならない水準であることが言えるかと思います。</p>\n\n\n\n<h2 class=\"wp-block-heading\">API Gateway をエンドポイントして利用する場合</h2>\n\n\n\n<p>RESTAPI・HTTP API のいずれかでも構築できます。用途に合わせてどちらで作成するかを決めた上で、<code>serverless.yml</code> で該当 Lambda の `events` 属性に以下のように追記します。</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>functions:\n  NuxtSsrCore:\n    runtime: nodejs16.x\n    handler: '.output/server/index.handler'\n    url: true\n    events:\n      - http: # REST API\n          method: ANY\n          path: /{proxy+}\n      - httpApi: # HTTP API\n          method: ANY\n          path: /{proxy+}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">まとめ</h2>\n\n\n\n<ul><li>Nuxt3 のサーバーエンジン Nitro はビルドターゲットとして AWS Lambda をサポート</li><li>LambdaのデプロイにはServerless Frameworkを利用</li><li>CloudFront, S3との組み合わせて静的ファイルを効率よく配信</li><li>より簡単な構築・１枚設定画面等のユースケースではAPI Gateway+Lambdaの組み合わせも可能</li></ul>\n\n\n\n<p>AppRunner/Fargate等コンテナのサービスと比べて迅速なデプロイ・シンプルな構成管理ができ、VPC Lambdaにすればセキュアなデータベースアクセス・アウトバウンドIPの固定が可能になる点等、抽象度の高いサービスでは難しいとされている部分がサーバーレスでありながら解決できるようになります。</p>\n\n\n\n<p>AWS Amplify やその他サードパーティのサービスでは乗り越えられない制約がある場合において、対応し得る手段としても捉えてみてはいかがでしょうか。</p>\n\n\n\n<p></p>\n","author":{"name":"Sonu Kim","description":"","avatars":{"avatar96":"https://secure.gravatar.com/avatar/5b527696e38c84c34048954d767b1537?s=96&d=mm&r=g"},"acf":{"userJpName":"金 仙優","userRole":"COO","facebook":"","twitter":"","github":""}},"date":"2022.12.14","path":"/blog/512/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"71","title":"AWS Lambda","path":"/tag/aws-lambda/"},{"id":"72","title":"Nuxt3","path":"/tag/nuxt3/"},{"id":"60","title":"Server-side rendering","path":"/tag/server-side-rendering/"},{"id":"2","title":"Serverless","path":"/tag/serverless/"},{"id":"58","title":"SSR","path":"/tag/ssr/"},{"id":"21","title":"Vue","path":"/tag/vue/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}