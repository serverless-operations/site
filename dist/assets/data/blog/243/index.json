{"hash":"7d8cc78e1b8fcf6bb367080efcae4f8df6dfb6c5","data":{"wordPressBlog":{"title":"RDSとDynamoDBの違いとは？AWSのサーバーレスにおけるデータベースの上手な使い分け(後編)","content":"\n<p><a href=\"https://serverless.co.jp/blog/232\">前編</a>の記事にてRDSとDynamoDBのデータベースとしての特徴の違いから、どのように選定を行えばよいのかを説明しました。</p>\n\n\n\n<p>本記事では後編として、それ以外の観点での使い分けについて述べていきたいと思います。</p>\n\n\n\n<h2 class=\"wp-block-heading\">サーバーレスの良さを活かすならDynamoDB</h2>\n\n\n\n<p>サーバーレスの良さとして、サーバーなどのインフラメンテナンスをクラウドにアウトソーシングし、ユーザは開発に集中できる点があります。</p>\n\n\n\n<p>DynamoDBでいうと、以下のような点です。</p>\n\n\n\n<ul><li>冗長化をユーザ側で行わなくて良い。データは自動で3箇所のデータセンターにコピーされる</li><li>容量は無制限</li><li>インスタンスのサイジングは不要</li><li>VPC&nbsp;= ネットワーク設計を行う必要がない</li></ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"418\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.42.48-1024x418.png\" alt=\"\" class=\"wp-image-247\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.42.48-1024x418.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.42.48-300x122.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.42.48-768x314.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.42.48-1536x627.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.42.48-2048x836.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>RDSを使用する場合、初期構築の段階でVPCによるネットワーク設計・構築やインスタンスのサイジングが必要になりますが、DynamoDBの場合はそれらは不要です。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"340\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.44.16-1024x340.png\" alt=\"\" class=\"wp-image-248\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.44.16-1024x340.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.44.16-300x100.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.44.16-768x255.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.44.16.png 1368w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>運用においても、OSのパッチ適用のような定期メンテナンスは、AWSが知らない間にやってくれます。そして、テーブル設計が正しく出来ている前提ではありますが、データの容量やトラフィックが大きく増えてもパフォーマンスが落ちることはありませんし、それに対応するためのシステム運用は発生しません。</p>\n\n\n\n<h2 class=\"wp-block-heading\">多くの人が扱いやすいのはRDS</h2>\n\n\n\n<p>多くの開発者が普段から使い慣れているのはやはりRDSでしょう。プロジェクトを開始して、開発者を募集したとします。その際にRDSを選定していたほうが開発者は集めやすいでしょうし、いい意味で枯れた技術でもあるためアプリケーション開発の目的のためにはフィットしやすいのではないでしょうか。</p>\n\n\n\n<h3 class=\"wp-block-heading\">テーブル設計</h3>\n\n\n\n<p>DynamoDBのテーブル設計は以下のようなポイントに基づいて行います。</p>\n\n\n\n<ul><li>アクセスパターンをベースにしてデータモデリングを行う必要がある。RDSのようにエンティティを抽出して正規化を行うという手順は踏まない</li><li>各パーティションにデータが分散するキー設計。ホットパーティションを発生させない</li><li>読み込みや検索はGSIで表現する。GSIで対応しきれないケースは別テーブルに専用のデータを作るのもあり</li></ul>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"272\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.45.35-1024x272.png\" alt=\"\" class=\"wp-image-249\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.45.35-1024x272.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.45.35-300x80.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.45.35-768x204.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.45.35-1536x408.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.45.35-2048x544.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>スキーマレスDBであるDynamoDBの特性を考えると、正規化を行なってテーブルを設計する必要性はありません。アクセスパターンに基づいてデータモデリングを行なうことが重要になります。</p>\n\n\n\n<p>しかし、RDSに慣れ親しんだ開発者にとって、このあたりの学習コストが高いと感じる人も多いでしょう。</p>\n\n\n\n<h3 class=\"wp-block-heading\">検索</h3>\n\n\n\n<p>DynamoDBは検索が苦手とよく言われます。これはDynamoDBの構造上、パーティションをまたいでインデックスを構成することが出来ないことに要因があります。パーティションをまたいでインデックスを構成するということは１つの共有ストレージの中でインデックス空間を構成することになります。これでは、膨大なデータ量や大量のトラフィックを捌く上でのボトルネックになり得てしまいます。</p>\n\n\n\n<p>なのでDynamoDBは、性能を優先させた結果、検索のしやすさを捨てているというわけですね。</p>\n\n\n\n<p>ただ、検索が出来ないというわけではなく、各パーティションではインデックスが構成されているのでパーティションキーを指定した上での検索は出来ますし、GSIを構成したり、検索専用のテーブルを作ると行った形でも対応することは可能です。また、そのレスポンスタイムやコストが許容できるデータ量であるならば、割り切ってフルスキャンを行うことも１つの手です。betweenやcontains, begins_withといったフィルタ式を使うことで、範囲検索や部分一致、前方一致などの検索も可能です。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"385\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.41.34-1024x385.png\" alt=\"\" class=\"wp-image-245\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.41.34-1024x385.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.41.34-300x113.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.41.34-768x289.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.41.34-1536x577.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.41.34.png 1740w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>しかし、やはりRDSに比べて検索が扱いづらいというのは多くの人が感じることでしょう。</p>\n\n\n\n<h2 class=\"wp-block-heading\">ハイブリッドな構成もあり</h2>\n\n\n\n<p>DynamoDBとRDSを一緒に使ってお互いのメリットを活かすという構成もケースによっては有りです。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"288\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.47.20-1024x288.png\" alt=\"\" class=\"wp-image-250\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.47.20-1024x288.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.47.20-300x85.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.47.20-768x216.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.47.20-1536x433.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/10/スクリーンショット-2020-10-29-17.47.20.png 1576w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>例えばハイトラフィックなアクセスがあり、さらに複雑な検索も発生する場合はこれが有効です。その場合はオンラインでのトラフィックをDynamoDBで捌き、DynamoDB Streamを使って非同期でRDSにデータを登録、後から読み込み・検索用のDBとしてRDSを取り扱うことも出来ます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">まとめ</h2>\n\n\n\n<p>これらの観点をまとめると、以下のような選定指針は妥当なもののうちの1つではないでしょうか。</p>\n\n\n\n<ul><li>明らかにハイトラフィックになることが予想される環境ではDynamoDBを選ぶ方向で考えてみる。検索やデータ分析の用途として、後からRDSやS3、Elasticsearchを追加することも出来る</li><li>トラフィックボリュームが読める、かつDBの機能を使っての厳密な一貫性担保や複雑なリレーションシップ、検索が発生する場合にはRDSを選ぶ方向で考えてみる</li></ul>\n\n\n\n<p>筆者の経験上、IoTは割とトラフィックが増えるケースが多くDynamoDBが選定され、業務システムなどは、社内の限られた場所のみで使われ、データの整合性が重要になるケースが多いことからRDSが選定される傾向にある気がします。</p>\n\n\n\n<p>しかし、極端にハイトラフィックへの対応や一貫性の確保が必要となるプロジェクトは、それなりにエッジケースではないかとも思っています。多くのシステムはRDSでもDynamoDBでも実装可能でしょう。</p>\n\n\n\n<p>そうなった時には、そのチームが技術的に目指す文化や方向性で自ずと選ぶプロダクトも決まるはずです。常にVPCを構築しているチームではVPCやインスタンスのサイジングはさほど面倒には感じないでしょうし、毎回DynamoDBを選定するチームはその逆でしょう。特にデータベースはシステムを構成する上でクリティカルな要素になるはずなので、普段から使い慣れているものを使いたいと考えるのはより自然なことだと思います。</p>\n\n\n\n<p>しかし、システムがローンチしてからRDSを選定したためにトラフィックの限界を超えられなかったり、DynamoDBを選定したために柔軟にデータが扱えないことに気づくことは当然避けたいことです。</p>\n\n\n\n<p>重要なことは、これらのデータベースの特性やメリット・デメリットを理解して、開発対象のアプリケーションの特性から将来的にその選定がボトルネックにならないか、その機能を活かすことができるのか、それともどちらもで対応は可能であり使いたいものを選んでも良いのかを判断できるだけの理解を身に着けておくことでしょう。</p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2020.10.29","path":"/blog/243/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"14","title":"DynamoDB","path":"/tag/dynamodb/"},{"id":"31","title":"RDS","path":"/tag/rds/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}