{"hash":"899a7dadc9c3ff481284dbd8cf731b9f93beffd5","data":{"wordPressBlog":{"title":"AWS CDKを使ってAPI Gateway(HTTPAPI)+LambdaをOpenAPIで定義してデプロイする","content":"\n<p>OpenAPIを使ってAPIの定義を行い、API GatewayのOpen API定義のインポート機能を使って行うのは、AWSでREST APIを開発する際のポピュラーなやり方ではないでしょうか。本記事ではAWS CDK(TypeScript)を使ってAPIGateway(HTTP API)とLambdaで構成されたAPIをOpenAPIの定義ファイルを使ってインポートしデプロイする方法です。</p>\n\n\n\n<p>実際のソースコートは以下に上がっていますのでこちらもご参考に。<br><a href=\"https://github.com/serverless-operations/cdk-httpapi-lambda-with-openapi\">https://github.com/serverless-operations/cdk-httpapi-lambda-with-openapi</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">OpenAPIの定義</h2>\n\n\n\n<p>以下のようなhelloと返すだけのサンプルのAPIを定義します。</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>---\nopenapi: 3.0.1\ninfo:\n  title: Hello API\n  description: An api always returns HELLO\n  version: 1.0.0\n\npaths:\n  /hello:\n    get:\n      summary: Returning Hello.\n      responses:\n        200:\n          $ref: '#/components/responses/GetHelloResponse'\n\ncomponents:\n  schemas:\n    Hello:\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          description: message\n  responses:\n    GetHelloResponse:\n      description: Get hello response.\n      content:\n         application/json:\n          schema:\n            $ref: '#/components/schemas/Hello'</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">CDKの実装</h2>\n\n\n\n<p>APIのCloudFormationを定義していきます。以下がCDKが直接実行する最上位のデプロイスクリプトです。SwaggerParserのライブラリを使用して上記のAPI定義をパースし、APIのスタックに渡してAPI Gatewayにデプロイを行います。</p>\n\n\n\n<pre class=\"wp-block-code language-typescript\"><code>#!/usr/bin/env node\nimport 'source-map-support/register'\nimport * as cdk from '@aws-cdk/core'\nimport { ApiStack } from './api-stack'\nimport * as dotenv from 'dotenv'\ndotenv.config()\n\nconst SwaggerParser = require('@apidevtools/swagger-parser')\n\nconst {\n  STAGE = 'dev'\n} = process.env\n\nasync function createApp(): Promise&lt;cdk.App&gt; {\n  const openApi: any = await SwaggerParser.dereference('./deploy/api-definition.yaml')\n  const app = new cdk.App()\n\n  \n  new ApiStack(app, `MyApiStack-${STAGE}`, {\n    stage: STAGE,\n    openApi: openApi,\n  })\n\n  return app\n}\ncreateApp()</code></pre>\n\n\n\n<p>以下がAPIのスタックを実装するソースコードです。HttpApiのコンストラクタはまだ記事を執筆している2021/3/13時点では、<code>experimental</code> のステータスのため、<code>CfnApi</code>コンストラクタを使用しています。ここにOpenAPIの定義を渡します。</p>\n\n\n\n<p>また、APIGatewayのOpenAPI独自拡張である<code>x-amazon-apigateway-integration</code>のプロパティもコードの中で追記しています。</p>\n\n\n\n<pre class=\"wp-block-code language-typescript\"><code>import * as cdk from '@aws-cdk/core'\nimport { Code, Function, Runtime } from '@aws-cdk/aws-lambda'\nimport { CfnApi, CfnStage } from '@aws-cdk/aws-apigatewayv2'\nimport { ServicePrincipal } from '@aws-cdk/aws-iam'\n\nexport interface ApiProps extends cdk.StackProps {\n  stage: string\n  openApi: any\n}\n\ninterface IntegrationSetting {\n  readonly type: string\n  readonly httpMethod: string\n  readonly uri: string\n  readonly payloadFormatVersion: string\n}\n\nexport class ApiStack extends cdk.Stack {\n\n  constructor(scope: cdk.Construct, id: string, props: ApiProps) {\n    super(scope, id, props)\n\n    const myFunction = new Function(this, 'myFunction', {\n      code: Code.fromAsset('dist/handler'),\n      handler: 'index.handler',\n      runtime: Runtime.NODEJS_14_X\n    })\n\n    const integrationSetting: IntegrationSetting = {\n      type: 'AWS_PROXY',\n      httpMethod: 'POST',\n      uri: myFunction.functionArn,\n      payloadFormatVersion: '2.0'\n    }\n　　　　\n　　　　// APIGatewayのOpenAPI独自拡張であるx-amazon-apigateway-integrationをここで追記\n    Object.entries(props.openApi.paths).forEach((&#91; path ]) =&gt; {\n      Object.entries(props.openApi.paths&#91;path]).forEach((&#91; method ]) =&gt; {\n        props.openApi.paths&#91;path]&#91;method]&#91;'x-amazon-apigateway-integration'] = integrationSetting\n      })\n    })\n\n　　　　// HttpApiのコンストラクタはまだ記事を執筆している2021/3/13時点では、experimental のステータスのため、CfnApiコンストラクタを使用しています\n    const api = new CfnApi(this, 'httpApi', {\n      body: props.openApi\n    })\n\n    new CfnStage(this, `api-${props.stage}`, {\n      apiId: api.ref,\n      stageName: '$default',\n      autoDeploy: true,\n    })\n\n    myFunction.addPermission(\n      'myFunctionPermission',\n      {\n        principal: new ServicePrincipal('apigateway.amazonaws.com'),\n        action: 'lambda:InvokeFunction',\n        sourceArn: `arn:aws:execute-api:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:${api.ref}/*/*/*`\n      }\n    )\n\n    new cdk.CfnOutput(this, 'HTTP API Url', {\n      value: api.attrApiEndpoint ?? 'Something went wrong with the deploy'\n    })\n  }\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">デプロイ</h2>\n\n\n\n<p>cdk deployコマンドでデプロイを行います。</p>\n\n\n\n<pre class=\"wp-block-code language-shellsession\"><code>$ cdk deploy --all</code></pre>\n\n\n\n<p>以下のようにデプロイ成功しました。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"395\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-21.59.18-1024x395.png\" alt=\"\" class=\"wp-image-348\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-21.59.18-1024x395.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-21.59.18-300x116.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-21.59.18-768x296.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-21.59.18-1536x593.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-21.59.18-2048x791.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>OpenAPIで定義したURLにリクエストを送ると以下のように正しくリクエストが返って来ました。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"30\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-22.01.44-1024x30.png\" alt=\"\" class=\"wp-image-349\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-22.01.44-1024x30.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-22.01.44-300x9.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-22.01.44-768x23.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-22.01.44-1536x45.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/スクリーンショット-2021-03-13-22.01.44-2048x60.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p></p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2021.03.13","path":"/blog/347/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"9","title":"API Gateway","path":"/tag/api-gateway/"},{"id":"42","title":"CDK","path":"/tag/cdk/"},{"id":"10","title":"Lambda","path":"/tag/lambda/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}