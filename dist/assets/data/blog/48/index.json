{"hash":"e5bf1eed04e22915fe60df772657de15feda3786","data":{"wordPressBlog":{"title":"Auth0のCI/CDパイプラインをCircleCIを使って作る","content":"\n<h2 class=\"wp-block-heading\">概要</h2>\n\n\n\n<p>Auth0の設定やRulesやCustomeDatabaseまわりのソースコードは一元的にGitなどで管理を行い、CircleCIなどでCIを通した上で自動でデプロイしたいケースが多いと思います。特に実案件の本番環境などでは。本記事ではそのやり方をtipsとして書いています。</p>\n\n\n\n<p>また、今回の内容は以下のGitHubリポジトリで公開してますので、より詳細を知りたければ確認してみて下さい<br><a href=\"https://github.com/infaspublications/auth0-deploy\" rel=\"noreferrer noopener\" target=\"_blank\">https://github.com/infaspublications/auth0-deploy</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">Auth0 Deploy CLI</h2>\n\n\n\n<p>Auth0には<a href=\"https://github.com/auth0/auth0-deploy-cli/\" rel=\"noreferrer noopener\" target=\"_blank\">Auth0 Deploy CLI</a>というCLIでソースコードや設定のデプロイを行うツールがあります。これを使うことでCI/CDパイプラインを作っていくというわけです。</p>\n\n\n\n<h3 class=\"wp-block-heading\">インストール</h3>\n\n\n\n<p>npmで自身のPC環境にインストールを行います。</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ npm i -g auth0-deploy-cli</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">既存のテナントの設定をコード化する</h3>\n\n\n\n<p>Auth0 Deploy CLIが便利なのは既存のテナントの設定を抜き取ってyamlの設定やローカルのソースコードツリーに展開してくれることです。</p>\n\n\n\n<p>まずは設定を抜き出したいテナント側に<a href=\"https://github.com/auth0-extensions/auth0-deploy-cli-extension\" rel=\"noreferrer noopener\" target=\"_blank\">Auth0 Deploy CLI Extension</a>をインストールします。これで自動でデプロイ用のアプリケーションを作ってくれます</p>\n\n\n\n<p>次にローカルに戻って、以下のような<code>config.json</code>ファイルを作り、client_idやclient_secretはAuth0 Deploy CLI Extensionが作ったアプリケーションの値をそれぞれ入れます</p>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>{\n  \"AUTH0_DOMAIN\": \"&lt;YOUR_TENANT>.auth0.com\",\n  \"AUTH0_CLIENT_ID\": \"&lt;client_id>\",\n  \"AUTH0_CLIENT_SECRET\": \"&lt;client_secret>\",\n  \"AUTH0_KEYWORD_REPLACE_MAPPINGS\": {\n    \"AUTH0_TENANT_NAME\": \"&lt;NAME>\",\n    \"ENV\": \"DEV\"\n },\n  \"AUTH0_ALLOW_DELETE\": false,\n  \"AUTH0_EXCLUDED_RULES\": &#91;\n    \"rule-1-name\",\n    \"rule-2-name\"\n ]\n}</code></pre>\n\n\n\n<p>そして以下のコマンドを実行しましょう</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ a0deploy export -c config.json  -f yaml -o ./</code></pre>\n\n\n\n<p>すると設定内容がすべてローカルに展開されているはずです。</p>\n\n\n\n<h3 class=\"wp-block-heading\">tenant.ymlに環境変数を追加する</h3>\n\n\n\n<p>エクスポートして自動生成された<code>tenant.yml</code>ファイルに以下のようなテナントの設定が記述されています。ただ、このファイルをエクスポートしただけの状態だとドメインなどの環境によって変えたい変数がハードコーディングされています</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>tenant:\n  enabled_locales:\n    - ja\n  flags:\n    universal_login: true\n    new_universal_login_experience_enabled: true\n    disable_clickjack_protection_headers: false\n  universal_login:\n    colors:\n      primary: '#000000'\n      page_background: '#e1e1e1'\nclients:\n  - name: mysite\n    allowed_clients: &#91;]\n    allowed_logout_urls:\n      - 'http://localhost:8080/auth0/'\n    allowed_origins:\n      - 'http://localhost:8080'\n    app_type: regular_web\n    callbacks:\n      - 'http://localhost:8080/auth0/'\n    client_aliases: &#91;]\n    cross_origin_auth: false\n    custom_login_page_on: true</code></pre>\n\n\n\n<p>Auth0 Deploy CLIではymlファイル内にて<code>@@key@@</code>&nbsp;や&nbsp;<code>##key##</code>といった識別子を記載することで環境変数の値を読むことが出来ます。以下のような例です。これでデプロイ時に<code>SITE_URL</code>という環境変数の値を読んでデプロイをしてくれます</p>\n\n\n\n<pre class=\"wp-block-code\"><code>allowed_logout_urls:\n      - 'http://##SITE_URL##/auth0/'</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">CI/CDパイプラインを構築する</h2>\n\n\n\n<h3 class=\"wp-block-heading\">テストを書く</h3>\n\n\n\n<p>エクスポートすると<code>tenant.yml</code>以外にも、<code>rules</code>や<code>databases</code>ディレクトリ配下にRulesやCustomeDatabaseの機能で使うソースコードがダウンロードされます。</p>\n\n\n\n<p>これらを元にユニットテストを書いてあげましょう。ここは単純なJSのユニットテストテストなので詳細は割愛します</p>\n\n\n\n<h3 class=\"wp-block-heading\">デプロイ戦略を決める</h3>\n\n\n\n<p>今回は、GitHubのTagでのリリース機能を使い。Tagを作ってpushすることでテストが走り、全てパスすれば本番のテナントにデプロイが走るという設定をしてみましょう</p>\n\n\n\n<h3 class=\"wp-block-heading\">デプロイスクリプトを書く</h3>\n\n\n\n<p>デプロイスクリプトは以下のようなNode.jsのスクリプトを書いてあげます。</p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>const auth0 = require('auth0-deploy-cli')\n\nconst config = {\n  AUTH0_DOMAIN: process.env.AUTH0_DOMAIN,\n  AUTH0_CLIENT_SECRET: process.env.AUTH0_CLIENT_SECRET,\n  AUTH0_CLIENT_ID: process.env.AUTH0_CLIENT_ID,\n  AUTH0_ALLOW_DELETE: true\n}\n\nauth0\n  .deploy({\n    input_file: 'tenant.yaml',\n    config,\n    env: process.env\n  })\n  .then(() => console.log('yey deploy was successful')) // eslint-disable-line no-console\n  .catch((err) => console.log(`Oh no, something went wrong. Error: ${err}`)) // eslint-disable-line no-console\n</code></pre>\n\n\n\n<p>そして<code>package.json</code>に以下の設定をして<code>npm run deploy</code>でデプロイできるようにします</p>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>\"scripts\": {\n  \"deploy\": \"node scripts/deploy.js\"\n},</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">CircleCIの設定ファイルを書く</h3>\n\n\n\n<p>以下のようにすると、Tagが作られたタイミングでテストとデプロイが走ります。Auth0のwebtaskの環境がNode8なのでそれに合わせて8系のコンテナを読んでます。上記のデプロイスクリプト内で呼び出している環境変数はデプロイ先の本番テナントの設定をCirclCIに環境変数として追加してあげましょう</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>version: 2\njobs:\n  build:\n    docker:\n      - image: circleci/node:8.11\n\n    working_directory: ~/repo\n\n    steps:\n      - checkout\n\n      - restore_cache:\n          keys:\n          - v1-dependencies-{{ checksum \"package.json\" }}\n          - v1-dependencies-\n\n      - run: npm install\n\n      - save_cache:\n          paths:\n            - node_modules\n          key: v1-dependencies-{{ checksum \"package.json\" }}\n\n      - run:\n          name: Formatting coding standard by prettier\n          command: npm run fmt\n\n      - run:\n          name: Check coding standard by ESLint\n          command: npm run lint\n\n      - run:\n          name: Run test\n          command: npm run test\n  deploy-prod:\n    docker:\n      - image: circleci/node:8.11\n\n    working_directory: ~/repo\n    steps:\n      - checkout\n      - run: npm install\n      - run: npm run deploy\n\nworkflows:\n  version: 2\n  build-deploy:\n    jobs:\n      - build:\n          filters:\n            tags:\n              only: /.*/\n      - deploy-prod:\n          requires:\n            - build\n          filters:\n            tags:\n              only: /.*/\n            branches:\n              ignore: /.*/</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">デプロイの実施</h3>\n\n\n\n<p>以下でTagをつくります。</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ git tag 1.0.0\n$ git push origin 1.0.0</code></pre>\n\n\n\n<p>CircleCIのダッシュボードを見るとうまくデプロイが完了しました！<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2Fe2fd351f-4236-9f6e-5708-996a80265389.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=56db97d4b97bb1e7f00cf575f6133daf\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2019.08.05","path":"/blog/48/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2019/08/auth0-logo-forlightbg.png","altText":"","mediaDetails":{"width":534}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"15","title":"Auth0","path":"/tag/auth0/"},{"id":"17","title":"CircleCI","path":"/tag/circleci/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}