{"hash":"d3dc5a74472b579ca6ae7ca671dc4f013853a504","data":{"wordPressBlog":{"title":"Auth0のAutomatic Migration機能で旧DBからのユーザーデータのマイグレーションを行う","content":"\n<h2 class=\"wp-block-heading\">概要</h2>\n\n\n\n<p>既存の認証システムからAuth0に移行を行う際にはユーザーデータをAuth0側にマイグレーションをする必要があります。Custom Databaseの機能を使えば、旧DBのままでもAuth0が使えますが、一番料金の高いエンタープライズプランしか対応していませんし、旧認証システムのサービス解約を伴う場合にはこれは使えません。</p>\n\n\n\n<p>Auth0には、<a href=\"https://auth0.com/docs/users/guides/configure-automatic-migration\" rel=\"noreferrer noopener\" target=\"_blank\">Automatic Migration</a>という機能があり、これを使うことでユーザデータのマイグレーションを行うことが出来ます。</p>\n\n\n\n<p>具体的にはユーザがログインを行うたびに、以下のフローを実施して自動でマイグレーションします。</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F21ace507-2753-a40d-b4c0-4d784b8a1be0.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ec3cc0324dceab5051755f07aa4558b8\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F21ace507-2753-a40d-b4c0-4d784b8a1be0.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ec3cc0324dceab5051755f07aa4558b8\" alt=\"Automatic Migration (1).png\"/></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\">Auth0の設定</h2>\n\n\n\n<ol><li>ダッシュボードの「Connections&gt;Database」から移行先のDatabaseを選択します</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2Ff7c4b245-8caf-6df1-f70a-9e277d122262.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=df4f22e17681ce151b5de7dbfc0e4d7b\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2Ff7c4b245-8caf-6df1-f70a-9e277d122262.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=df4f22e17681ce151b5de7dbfc0e4d7b\" alt=\"スクリーンショット 2019-08-11 10.19.52.png\"/></a></figure>\n\n\n\n<ol><li>Custom DatabaseタブよりUse my own databaseを有効化します</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F7a51fd50-be88-691c-61a2-3b210d6dc350.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1683ef81a253a23f2a02c5e414ad0e9f\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F7a51fd50-be88-691c-61a2-3b210d6dc350.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1683ef81a253a23f2a02c5e414ad0e9f\" alt=\"スクリーンショット 2019-08-11 10.21.06.png\"/></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\">旧認証システムへ認証するためのスクリプト</h2>\n\n\n\n<p>Custom Databaseタブ内にLoginとGet UserというDatabase Action Scriptsを定義する箇所がありますが、ここから旧認証システムへログインしたりユーザデータを取得するためのコードを記述します。</p>\n\n\n\n<p>LoginスクリプトはAuth0にログインしようとしているユーザのデータが存在しない場合に呼び出されます。<br>Get Userスクリプトは、サインアップ時のユーザの存在チェックやパスワードの変更時（用途がよくわかってませんが。。）、Auth0マネジメントAPIのユーザ名やパスワードをアップデートするエンドポイントがリクエストされた時に呼び出されます。</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F87029d90-7c71-9e86-04cc-0a2752daa6c0.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2046bf37ab11852005db245ab6b918eb\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F87029d90-7c71-9e86-04cc-0a2752daa6c0.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2046bf37ab11852005db245ab6b918eb\" alt=\"スクリーンショット 2019-08-11 10.44.20.png\"/></a></figure>\n\n\n\n<p>例えば、<code>bcrypt</code>でハッシュ化されたパスワードを持つMySQLのユーザDBに対してLoginスクリプトを定義すると以下のようなコードになります。ログインに成功すれば<code>callback</code>にマイグレーションしたいユーザ情報を返します。ログインに失敗すれば、<code>WrongUsernameOrPasswordError</code>を返してログイン画面にエラーを表示させるようにします。</p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>// eslint-disable-next-line no-unused-vars\nfunction login(email, password, callback) {\n  const mysql = require('mysql')\n  const bcrypt = require('bcrypt')\n\n  const connection = mysql.createConnection({\n    host: configuration.DB_HOST, // eslint-disable-line no-undef\n    user: configuration.DB_USERNAME, // eslint-disable-line no-undef\n    password: configuration.DB_PASSWORD, // eslint-disable-line no-undef\n    database: configuration.DB_DATABASE // eslint-disable-line no-undef\n  })\n\n  connection.connect()\n\n  const query =\n    'SELECT account_storages.id as id, email, password, surname, first_name FROM users WHERE email = ?'\n\n  connection.query(query, &#91;email], function(err, results) {\n    if (err) return callback(err)\n    if (results.length === 0) return callback(new WrongUsernameOrPasswordError(email)) // eslint-disable-line no-undef\n    const user = results&#91;0]\n\n    bcrypt.compare(password, user.password, function(error, isValid) {\n      if (error || !isValid) return callback(error || new WrongUsernameOrPasswordError(email)) // eslint-disable-line no-undef\n\n      callback(null, {\n        user_id: user.id.toString(),\n        username: user.email.replace(/@.+$/, ''),\n        email: user.email,\n        email_verified: true,\n        name: user.first_name + ' ' + user.surname\n      })\n    })\n  })\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">動作確認</h2>\n\n\n\n<h3 class=\"wp-block-heading\">ログイン</h3>\n\n\n\n<p>移行元のMySQLのユーザDBには<code>horike37</code>のアドレスのユーザが存在しています。<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F37e36fd4-c47c-6f88-3939-1db7991d48ae.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=42c23d269ceff5bc32f0c8dee88450d7\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<p>Auth0で作ったログイン画面からログインします。<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F2510b9d4-416c-98c4-6113-d23322131435.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d7335d4598b23898f88dbdfea5e575d3\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<p>ログイン成功後にAuth0のダッシュボードを確認すると以下のようにユーザがマイグレーションされていることが確認できます。<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F82ce39be-2993-e352-7157-b258a24174ed.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cb2438ba0d5a61690a24cfa1ed2be436\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<h3 class=\"wp-block-heading\">パスワード忘れ</h3>\n\n\n\n<p>移行前のユーザに対してパスワード忘れからパスワードの変更を行った際でもこのマイグレーション機能はちゃんと動作します。</p>\n\n\n\n<p>まずは再発行用のページからメールアドレスを入力して再設定リンクを送信します。<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F7d371ffb-be53-e3c5-2e14-c39f1f323fc6.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f69120edceae460a4a8e894b30fcc0bb\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<p>再設定リンクからパスワードを変更します。<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2Faf30716c-ffac-f80b-87cb-34715f4286b3.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=96d56e4dd0c1865bd4b3331396f0bd40\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<p>同様に変更したパスワードでログインすると、ちゃんと変更後のパスワードでユーザデータのマイグレーションがお行われます。<br><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F62cb5af3-f119-c67e-b244-a27af26cecc8.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=00b8ec4f77d9b9520143d36b408724de\" target=\"_blank\" rel=\"noreferrer noopener\"></a></p>\n\n\n\n<h2 class=\"wp-block-heading\">まとめ</h2>\n\n\n\n<p>Automatic Migrationの機能を使えばこのようにシームレスにマイグレーションを行うことが出来ます。<br>ただし、これはログインをきっかけにマイグレーションを行うため、ログインのないユーザに対してはマイグレーションが行えません。一定期間ログインがなければユーザデータを削除するようにアナウンスをするなどの対応は必要になるでしょう。</p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2019.08.11","path":"/blog/49/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2019/08/auth0-logo-forlightbg.png","altText":"","mediaDetails":{"width":534}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"15","title":"Auth0","path":"/tag/auth0/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}