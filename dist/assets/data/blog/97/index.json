{"hash":"899a7dadc9c3ff481284dbd8cf731b9f93beffd5","data":{"wordPressBlog":{"title":"Auth0 + AppSync + StepFunctions + Stripe + Vuejs(Nuxt.js)でサーバーレスECサイトを作る","content":"\n<h2 class=\"wp-block-heading\">概要</h2>\n\n\n\n<p>以下の様な構成でGraphQLでサーバーレスなECサイトを作ってみましょう。AppSyncのバックエンドにStepFunctionsに置くことで決済のトランザクションを可能にしています。トランザクションの結果はGraphQLのSubscriptionでフロントエンド側に通知を行う構成になっています。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"834\" height=\"558\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/serverless-ec-2.png\" alt=\"\" class=\"wp-image-101\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/serverless-ec-2.png 834w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/serverless-ec-2-300x201.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/serverless-ec-2-768x514.png 768w\" sizes=\"(max-width: 834px) 100vw, 834px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">GraphQLスキーマ</h2>\n\n\n\n<p>スキーマを以下の様に定義します。<code>createPayment</code> ミューテーションで購入リクエストをブラウザから送ります。そして、StepFunctionsの最後のステップで<code>publishPaymentResult</code> ミューテーションに購入処理のトランザクション結果を送り、ブラウザでは&nbsp;<code>onGetResult</code> サブスクリプションで結果を受け取る設計になってます。</p>\n\n\n\n<pre class=\"wp-block-code language-graphql\"><code>type Mutation {\n\tcreatePayment(input: PaymentInput!): Payment\n\tpublishPaymentResult(result: ResultInput): Result\n}\n\ntype Payment {\n\tid: ID!\n\tprice: Int!\n\tamount: Int!\n}\n\ninput PaymentInput {\n\tid: ID!\n\tprice: Int!\n\tamount: Int!\n}\n\ntype Query {\n\tgetPayment(id: ID!): Payment\n}\n\ntype Result {\n\tid: ID!\n\tstatus: ResultStatus!\n}\n\ninput ResultInput {\n\tid: ID!\n\tstatus: ResultStatus!\n}\n\nenum ResultStatus {\n\tSUCCESS\n\tFAILURE\n}\n\ntype Subscription {\n\tonGetResult(id: ID!): Result\n\t\t@aws_subscribe(mutations: &#91;\"publishPaymentResult\"])\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n\tsubscription: Subscription\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">AppSyncの設定</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Auth0による認証</h3>\n\n\n\n<p>OIDC認証を以下のように設定します。プロバイダードメインには契約したあなたのAuth0テナントのURLを設定しましょう</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"736\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-2.44.14-1024x736.png\" alt=\"\" class=\"wp-image-100\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-2.44.14-1024x736.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-2.44.14-300x216.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-2.44.14-768x552.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-2.44.14-1536x1104.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-2.44.14.png 1706w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h3 class=\"wp-block-heading\">StepFunctionsとの連携</h3>\n\n\n\n<p>Classmethodの岩田さんの<a href=\"https://dev.classmethod.jp/articles/step-functions-for-appsync-resolver/\">AppSyncのクエリからStep Functionsのステートマシンを起動して時間のかかる処理を非同期に実行する</a>&nbsp;を参考にさせてもらいました。</p>\n\n\n\n<p>記事のとおりにHTTPのデータソースを作成してそこからIAMで認可させてStepFunctionsのエンドポイントにリクエストを投げています。</p>\n\n\n\n<p>リクエストのマッピングテンプレートは以下のように定義しています。<br><code>$context.identity.claims.sub</code> や<code>stripe_user_id</code> などを渡すことでStepFunctions内のLambdaでAuth0上のユーザデータやStripe上のデータとやり取りできるようにしています。</p>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\": \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartExecution\"\n    },\n    \"body\": {\n      \"stateMachineArn\": \"arn:aws:states:us-east-1:&lt;accountID>:stateMachine:myStateMachine\",\n      \"input\": \"{ \\\"id\\\": \\\"$context.arguments.input.id\\\", \\\"idToken\\\": \\\"$context.request.headers.authorization\\\", \\\"user_id\\\":\\\"$context.identity.claims.sub\\\", \\\"stripe_user_id\\\":\\\"$context.identity.claims&#91;'https://serverless-ec.com/stripe_user_id']\\\" }\"\n    }\n  }\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">StepFunctionsの設定</h2>\n\n\n\n<p>以下の様にワークフローを定義します。決済のトランザクション処理を実施できる仕組みになっています。どこかで処理が失敗した場合には処理をロールバックさせて失敗したことを通知出来るような仕組みになっています。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"910\" height=\"762\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.01.44.png\" alt=\"\" class=\"wp-image-103\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.01.44.png 910w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.01.44-300x251.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.01.44-768x643.png 768w\" sizes=\"(max-width: 910px) 100vw, 910px\" /></figure>\n\n\n\n<p>それぞれのステップでは以下の処理を実施しています。</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>ChargeStripe</td><td>StripeのChargeAPIを叩いて決済処理を実施します</td></tr><tr><td>Order</td><td>注文処理を実施します</td></tr><tr><td>NotificationSuccess</td><td>PublishPaymentResultミューテーションに成功を送信します</td></tr><tr><td>Rollback</td><td>注文処理が失敗した場合にStripeの決済を取り消して状態を元に戻します</td></tr><tr><td>NotificationError</td><td>PublishPaymentResultミューテーションに失敗を送信します</td></tr></tbody></table></figure>\n\n\n\n<p><code>ChargeStripe</code>では以下のような形で決済処理を実施します。</p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>'use strict';\n\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\nmodule.exports.handler = async event => {\n  const charge = await stripe.charges.create({\n    amount: 3000,\n    currency: \"jpy\",\n    description: 'テスト決済',\n    customer: event.stripe_user_id\n  })\n\n  return {\n\t  id: event.id,\n\t  idToken: event.idToken,\n\t  charge: charge.id\n  }\n}</code></pre>\n\n\n\n<p>そして処理がすべて成功したら<code>NotificationSuccess</code>で成功通知用にミューテーションを送ります。以下のコードもClassmethodの岩田さんの記事を参考にさせてもらいました。</p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>'use strict';\nconst axios = require('axios')\n\nconst PublishPaymentResultMutation = `mutation PublishPaymentResult(\n    $id: ID!,\n    $status: ResultStatus!\n  ) {\n    publishPaymentResult(result: {id: $id, status: $status}) {\n      id\n      status\n    }\n  }`;\n\nmodule.exports.handler = async event => {\n  console.log(event)\n\n  const mutation = {\n    query: PublishPaymentResultMutation,\n    operationName: 'PublishPaymentResult',\n    variables: {\n      id: event.id,\n      status: 'SUCCESS'\n    },\n  };\n\n  try {\n    const response = await axios({\n\tmethod: 'POST',\n\turl: process.env.APPSYNC_URL,\n\tdata: JSON.stringify(mutation),\n\theaders: {\n\t  'Content-Type': 'application/json',\n\t  'Authorization': `${event.idToken}`,\n\t}\n    });\n} catch (error) {\n    console.error(`&#91;ERROR] ${error.response.status} - ${JSON.stringify(error.response.data)}`);\n    throw error;\n  }\n};</code></pre>\n\n\n\n<p>Rollbackでは以下の様なコードで決済をRefundする処理を書いています</p>\n\n\n\n<pre class=\"wp-block-code language-js\"><code>'use strict';\n\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\nmodule.exports.handler = async event => {\n  const error = JSON.parse(event.Cause)\n  const data = JSON.parse(error.errorMessage)\n  await stripe.refunds.create({\n    charge: data.charge\n  })\n\n  return {\n\t  id: data.id,\n\t  idToken: data.idToken\n  }\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">Vue.js(Nuxt.js)からGraphQLにリクエストを送るためにApolloクライアントを設定する</h2>\n\n\n\n<h3 class=\"wp-block-heading\">Auth0 と連携する </h3>\n\n\n\n<p>フロントエンドのサンプルは Vue.js(Nuxt.js) で作成していきます。先ずはOIDC 認証モードでリクエストを送るためにIDトークンを取得する必要があり、フロントエンド側とAuth0を連携する設定を行います。package.json に <code>@nuxtjs/auth</code> モジュールを追加し、<code>nuxt.config.js</code> に以下の設定を追加します。</p>\n\n\n\n<pre class=\"wp-block-code language-ts\"><code>const config = {\n  modules: &#91;\n    // ...\n    '@nuxtjs/auth'\n  ],\n  // ...\n  auth: {\n    strategies: {\n      auth0: {\n        domain: 'xxx.auth0.com' // Auth0 Application Domain\n        client_id: '...' // Auth0 Application Client ID,\n        scope: &#91; 'openid' ],\n        response_type: 'id_token token',\n        token_key: 'id_token'\n      }\n    },\n    redirect: {\n      login: '/',\n      logout: '/',\n      callback: '/callback',\n      home: '/main'\n    }\n  }\n}</code></pre>\n\n\n\n<p>サインイン画面に遷移させたいところで以下のように実装します。IDトークンを取得する方法については後述します。</p>\n\n\n\n<pre class=\"wp-block-code language-ts\"><code>  methods: {\n    login() {\n      this.$auth.loginWith('auth0')\n    }\n  }</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">Apollo クライアントを設定、利用する</h3>\n\n\n\n<p>package.json にいくつか必要なモジュールを追加します。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>yarn add @nuxtjs/apollo aws-appsync aws-appsync-subscription-link apollo-link</code></pre>\n\n\n\n<p><code>nuxt.config.js</code> には以下のように設定を追加します。</p>\n\n\n\n<pre class=\"wp-block-code language-ts\"><code>const config = {\n  modules: &#91;\n    // ...\n    '@nuxtjs/apollo'\n  ],\n  // ...\n  apollo: {\n    authenticationType: '',\n    clientConfigs: {\n      default: '~/apollo/config.js'\n    }\n  },\n}</code></pre>\n\n\n\n<p>注意点としては<code>authenticationType</code> に空文字 <code>''</code> を設定する必要があります。<code>Bearer</code> のような認証タイプは特に指定しません。</p>\n\n\n\n<p>続いて、Apollo クライアントの設定ファイル <code>~/apollo/config.js</code> を書いていきます。AppSyncのSubscriptionを利用するためには、AppSyncのリアルタイムエンドポイントとのWebSocket接続を確立してくれるモジュールを利用する必要があります。 </p>\n\n\n\n<pre class=\"wp-block-code language-ts\"><code>\nimport { Context } from '@nuxt/types/app'\nimport { ApolloLink } from 'apollo-link'\nimport { AUTH_TYPE } from 'aws-appsync'\nimport { createSubscriptionHandshakeLink } from 'aws-appsync-subscription-link'\n\nexport default ctx => {\n\n  const { APPSYNC_GRAPHQL_ENDPOINT, APPSYNC_REGION } = ctx.env\n  const link = ApolloLink.from(&#91;\n\n    createSubscriptionHandshakeLink({\n      url: APPSYNC_GRAPHQL_ENDPOINT,\n      region: APPSYNC_REGION,\n      auth: {\n        type: AUTH_TYPE.OPENID_CONNECT,\n        // Context, Vuex, localStorage 等からセット可能\n        jwtToken: () => 'idToken'\n      }\n    })\n\n  ])\n  return { link }\n}</code></pre>\n\n\n\n<p>以上、AppSync とつなぐための準備ができました。Vue コンポーネントの中で <code>apollo</code> プロパティを利用するか、<code>this.$apollo.getClient()</code>でクライアントインスタンスを取得するなどして、query/mutation/subscriptionを実装できます。</p>\n\n\n\n<p>以下のようにAuth0連携で取得した ID Token を指定することもできます。</p>\n\n\n\n<pre class=\"wp-block-code language-ts\"><code>// ID Token を取得\nconst bearerIdToken = this.$auth.getToken('auth0')\n\n// 先頭 'Bearer' 文字列を外す\nconst idToken = bearerToken.substring(constants.BEARER_PREFIX.length)\n\n// クライアントに ID Token をセット\nthis.$apolloHelpers.onLogin(idToken)\n\n// GraphQLリクエストを送る\nthis.$apollo.getClient().query({ /* ... */ })\nthis.$apollo.getClient().mutation({ /* ... */ })\nthis.$apollo.getClient().subscribe({ /* ... */ })</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">動作確認</h2>\n\n\n\n<p>ローカルでサイトにアクセスして、まずはAuth0からログインを行います。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"940\" height=\"1024\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.20.50-940x1024.png\" alt=\"\" class=\"wp-image-104\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.20.50-940x1024.png 940w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.20.50-275x300.png 275w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.20.50-768x837.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.20.50.png 1274w\" sizes=\"(max-width: 940px) 100vw, 940px\" /></figure>\n\n\n\n<p>すると購入ページに遷移するので購入してみましょう。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"591\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.04-1024x591.png\" alt=\"\" class=\"wp-image-105\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.04-1024x591.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.04-300x173.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.04-768x443.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.04.png 1512w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>以下の通りちゃんと結果をサブスクリプションで受け取ることが出来ました。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"760\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.14-1024x760.png\" alt=\"\" class=\"wp-image-106\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.14-1024x760.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.14-300x223.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.14-768x570.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.21.14.png 1140w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>今度はOrder処理をわざと落としてちゃんとロールバックして失敗の結果が通知くるか検証してみましょう。</p>\n\n\n\n<p>以下の通り失敗のステータスで結果が受け取れました。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"674\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.28-1024x674.png\" alt=\"\" class=\"wp-image-107\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.28-1024x674.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.28-300x198.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.28-768x506.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.28.png 1394w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>StepFunctionsは以下の通りOrderが失敗してRollbackが発生していることがわかります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"860\" height=\"754\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.48.png\" alt=\"\" class=\"wp-image-108\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.48.png 860w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.48-300x263.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.27.48-768x673.png 768w\" sizes=\"(max-width: 860px) 100vw, 860px\" /></figure>\n\n\n\n<p>Stripeでもちゃんと返金処理が実施されていました。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"633\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.33.22-1024x633.png\" alt=\"\" class=\"wp-image-109\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.33.22-1024x633.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.33.22-300x186.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.33.22-768x475.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/スクリーンショット-2020-07-20-3.33.22.png 1342w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p></p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2020.07.20","path":"/blog/97/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/serverless-ec-3.png","altText":"serverless-ec","mediaDetails":{"width":834}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"19","title":"Appsync","path":"/tag/appsync/"},{"id":"15","title":"Auth0","path":"/tag/auth0/"},{"id":"18","title":"Step Functions","path":"/tag/step-functions/"},{"id":"20","title":"Stripe","path":"/tag/stripe/"},{"id":"21","title":"Vue","path":"/tag/vue/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}