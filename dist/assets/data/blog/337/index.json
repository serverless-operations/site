{"hash":"51bbfd82cb20fb429b7eb8047edc7c53796980aa","data":{"wordPressBlog":{"title":"stripe を使って定期料金と従量課金を組み合わせたサブスクリプション型サービスを作る","content":"\n<p>決済サービスで有名な stripe ですが、高機能かつ使いやすく、導入事例も増えてきています。この頃特に関心が高まってきたサブスクリプション型の料金体系についても豊富な機能が提供されており、これをきっかけに stripe を導入することも決めたプロジェクトも多いのではないでしょうか。</p>\n\n\n\n<p>今回は、stripe を使って定額・定期購入のサブスクリプション及び利用量に応じて金額が変動する従量課金の両方を組み合わせた料金体型について、実現方法をまとめました。</p>\n\n\n\n<h2 class=\"wp-block-heading\">サンプルの商品を登録する</h2>\n\n\n\n<p>stripe ダッシュボードにて、以下のようにサンプルの商品を登録します。<br>① Sandbox &#8211; Basic Plan：一般的な定額・定期購入タイプのサービス利用プラ<br>② Sandbox &#8211; API Usage：API 呼び出し回数等、従量課金の利用プラン</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"alignleft size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.52.16.png\" alt=\"\" class=\"wp-image-338\" width=\"600\" height=\"623\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.52.16.png 600w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.52.16-289x300.png 289w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><figcaption>① Sandbox &#8211; Basic Plan</figcaption></figure></div>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.55.50.png\" alt=\"\" class=\"wp-image-339\" width=\"600\" height=\"605\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.55.50.png 600w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.55.50-298x300.png 298w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.55.50-150x150.png 150w\" sizes=\"(max-width: 600px) 100vw, 600px\" /><figcaption>② Sandbox &#8211; API Usage</figcaption></figure>\n\n\n\n<p>今回のサンプルについては、① Sandbox &#8211; Basic Plan に「Pricing model: Standard pricing（標準の料金体系）」を指定、② Sandbox &#8211; API Usage に「Pricing model: Graduated pricing（段階的な料金体系）」を指定します。</p>\n\n\n\n<p>従量課金向けの料金体系としては「段階的」と「数量ベース」の２種類があります。一定数の段階を設けて各段階ごとに異なる単価を適用する場合は「段階的」、利用量の合計に応じて全体に対し異なる単価を適用する場合は「数量ベース」となります。</p>\n\n\n\n<p>例えば１ユニットあたりの金額を算定する方式として</p>\n\n\n\n<ul><li>「1-100回目は○○円、101-200回目は○○円」と段階的に異なる料金を積み上げていく（段階式）</li><li>「合計回数100回以下の場合○○円、合計回数200回以下の場合は○○円、合計回数が201回以上の場合は○○円」と合計数ベースで単価を決める（数量ベース）</li></ul>\n\n\n\n<p>という使い分けが可能になります。</p>\n\n\n\n<p>stripe のダッシュボードではこういった金額算定の詳細が直感的に設定できるようになっていて、たとえ商品の課金構造が複雑であってもこのような細かいルールを自前で実装する必要がなくなります。</p>\n\n\n\n<p>引き続き、請求期間を「月次」、また従量課金の商品については「Usage is metered（使用量が計測されます）」にチェックを入れます。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.56.08.png\" alt=\"\" class=\"wp-image-340\" width=\"300\" height=\"332\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.56.08.png 600w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-14.56.08-271x300.png 271w\" sizes=\"(max-width: 300px) 100vw, 300px\" /></figure></div>\n\n\n\n<p>「Usage is metered（使用量が計測されます）」にチェックを入れることで、後ほど説明する「使用量の報告」ができるようになります。実際に各ユーザーの使用量を stripe の API 経由でレポートするだけで、商品登録時に設定した料金テーブルに合わせて課金額が計算されます。</p>\n\n\n\n<p>「Charge for metered usage by（計測された使用量に基づく請求）」については、適宜ユースケースやシステム仕様に合わせて選択すると良いと思います。</p>\n\n\n\n<h2 class=\"wp-block-heading\">顧客及びサブスクリプションの登録</h2>\n\n\n\n<p>サンプルで利用する顧客、支払情報、サブスクリプションを登録します。決済登録画面のデモは公式の Checkout サンプルを利用します。</p>\n\n\n\n<p><a href=\"https://stripe.com/docs/billing/subscriptions/checkout\">https://stripe.com/docs/billing/subscriptions/checkout</a></p>\n\n\n\n<p>GitHub にサンプルがあるのでクローンし、以下のように修正します。Price ID については先程登録した商品の画面から <code>price_xxx</code> という値をコピーして適用します。</p>\n\n\n\n<pre class=\"wp-block-code language-javascript\"><code>// https://github.com/stripe-samples/checkout-single-subscription\n// server/node/server.js L.50 -\nconst session = await stripe.checkout.sessions.create({\n  mode: 'subscription',\n  payment_method_types: &#91; 'card' ],\n  line_items: &#91;\n    { price: '{PRICE_ID_PLAN}', quantity: 1 },\n    { price: '{PRICE_ID_API_USAGE}' }\n  ],\n// ...</code></pre>\n\n\n\n<p>また、server/node に .env ファイルを作成しAPIキー等を以下のようにセットしておきます。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code># Stripe keys\nSTRIPE_PUBLISHABLE_KEY={PUBLISHABLE_KEY}\nSTRIPE_SECRET_KEY={SECRET_KEY}\n\n# Environment\nSTATIC_DIR=../../client\n\n# Stripe subscription data\nDOMAIN=http://localhost:4242</code></pre>\n\n\n\n<p>README.md の Instruction に従い、以下のようにサンプルアプリ実行します。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>cd server/node # there's a README in this folder with instructions\nnpm install\nnpm run start</code></pre>\n\n\n\n<p>サンプルアプリが立ち上がったらブラウザを起動し、最初の画面はダミーなのでどちらかの「Select」を押してスキップ、登録画面に進むと、先程登録した２つの商品（定額課金・従量課金）が表示されています。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"643\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.03.45-1024x643.png\" alt=\"\" class=\"wp-image-341\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.03.45-1024x643.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.03.45-300x189.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.03.45-768x483.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.03.45.png 1200w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>※カード番号は stripe テストモード専用の番号です。</p>\n\n\n\n<p>各項目を埋めて Subscribe ボタンを押して登録、stripe のダッシュボードで確認すると、顧客とサブスクリプション情報が登録されていることが分かります。さらに、「定期支払」項目より請求情報の詳細が確認できます。通常の定額課金については、ここまでで先ずOKとなります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1000\" height=\"474\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.07.21.png\" alt=\"\" class=\"wp-image-342\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.07.21.png 1000w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.07.21-300x142.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.07.21-768x364.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">従量課金の使用量を報告する</h2>\n\n\n\n<p>最後に、実際に従量課金（Metered Billing）の金額を反映させるために、顧客が利用した量（ユニット）を数値として stripe に送信する必要があります。その時に使えるのが、Usage Records API です。Path パラメータに顧客の定期支払のダッシュボード画面から取得できる「サブスクリプションアイテムID（<code>si_xxx</code>）」を指定して数量を送信する形となります。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>&#91;request sample]\nPOST /v1/subscription_items/:subscription_item_id/usage_records\nauthorization: Bearer {SECRET_API_KEY}\ncontent-type: application/x-www-form-urlencoded\n\ntimestamp=1614752111&amp;quantity=250&amp;action=set\n\n&#91;response sample]\n200 OK\n{\n  \"subscription_item\": \"xxx\",\n  \"quantity\": 250,\n  \"timestamp\": 1615097751,\n  // ...\n}</code></pre>\n\n\n\n<p>すると、このように使用量が請求情報に反映されることが確認できます。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1000\" height=\"555\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.19.59.png\" alt=\"\" class=\"wp-image-343\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.19.59.png 1000w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.19.59-300x167.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen-Shot-2021-03-07-at-15.19.59-768x426.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">アドホックに請求項目と金額を追加する方法もある</h2>\n\n\n\n<p>サブスクリプションの期間中に次回の請求項目を随時追加できるAPIもあります。減額も可能なので、アドホックに次回請求の金額を調節・精算するといった使い方も可能です。</p>\n\n\n\n<p><a href=\"https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items\">https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items</a></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"210\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen_Shot_2021-02-08_at_18.55.32-1024x210.png\" alt=\"\" class=\"wp-image-344\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen_Shot_2021-02-08_at_18.55.32-1024x210.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen_Shot_2021-02-08_at_18.55.32-300x62.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen_Shot_2021-02-08_at_18.55.32-768x158.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen_Shot_2021-02-08_at_18.55.32-1536x315.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/03/Screen_Shot_2021-02-08_at_18.55.32.png 1812w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">まとめ</h2>\n\n\n\n<ul><li>stripe を利用して、通常の定期購入に加え、従量課金もセットで課金体系を構築することが可能です。</li><li>従量課金については商品登録時に予め料金体系を設定し、使用量を送信することで料金に反映させます。</li><li>こうすることで従量課金に伴う課金ロジックを自前で実装する必要がなく、stripe 側にまるっとおまかせできるメリットがあります。</li></ul>\n","author":{"name":"Sonu Kim","description":"","avatars":{"avatar96":"https://secure.gravatar.com/avatar/5b527696e38c84c34048954d767b1537?s=96&d=mm&r=g"},"acf":{"userJpName":"金 仙優","userRole":"COO","facebook":"","twitter":"","github":""}},"date":"2021.03.08","path":"/blog/337/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"39","title":"node.js","path":"/tag/node-js/"},{"id":"41","title":"pricing","path":"/tag/pricing/"},{"id":"34","title":"SaaS","path":"/tag/saas/"},{"id":"20","title":"Stripe","path":"/tag/stripe/"},{"id":"38","title":"subscription","path":"/tag/subscription/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}