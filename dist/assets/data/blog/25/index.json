{"hash":"35053359aff549c8e1d81009f00eae950570ae45","data":{"wordPressBlog":{"title":"Serverless Frameworkの使い方まとめ","content":"\n<h1 class=\"wp-block-heading\">概要</h1>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"455\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/04/serverless_main-1024x455.gif\" alt=\"\" class=\"wp-image-463\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/04/serverless_main-1024x455.gif 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/04/serverless_main-300x133.gif 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/04/serverless_main-768x341.gif 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2022/04/serverless_main-1536x683.gif 1536w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p><a rel=\"noreferrer noopener\" href=\"https://serverless.com/\" target=\"_blank\">Serverless Framework</a>&nbsp;はServerless Applicationを構成管理デプロイするためのツールです。この記事ではその使い方をまとめています。</p>\n\n\n\n<p>※ 2022.4.17 &#8211; Serverless Framework v3 の変更内容を反映しました。</p>\n\n\n\n<h1 class=\"wp-block-heading\">インストール</h1>\n\n\n\n<h2 class=\"wp-block-heading\">Node.jsのインストール</h2>\n\n\n\n<p>ServerlessはNode.jsで作られたCLIツールです。<br>なので、あなたのマシンにNode.jsをインストールする必要があります。<a rel=\"noreferrer noopener\" href=\"https://nodejs.org/ja/\" target=\"_blank\">Node.jsの公式サイト</a>からあなたのPCにNode.jsをインストールしましょう。ServerlessはNode.jsのv12以上が必要となります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">Serverlessのインストール</h2>\n\n\n\n<p>Serverlessは<a href=\"https://www.npmjs.com/\" rel=\"noreferrer noopener\" target=\"_blank\">npm</a>のパッケージとして公開されています。ターミナルを開いて、<code>npm install -g serverless</code>でインストールが完了します。</p>\n\n\n\n<p>正しくインストールされているかは、<code>serverless --version</code>にて確認しましょう。以下のようにバージョンが表示されれば正しくインストールされています。</p>\n\n\n\n<div class=\"wp-block-group is-layout-flow\"><div class=\"wp-block-group__inner-container\">\n<div class=\"wp-block-group language-php is-layout-flow\"><div class=\"wp-block-group__inner-container\">\n<div class=\"wp-block-group is-layout-flow\"><div class=\"wp-block-group__inner-container\">\n<div class=\"wp-block-group is-layout-flow\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-code language-ssh\"><code>$ serverless --version\nFramework Core: 3.14.0\nPlugin: 6.2.1\nSDK: 4.3.2</code></pre>\n</div></div>\n</div></div>\n</div></div>\n</div></div>\n\n\n\n<h2 class=\"wp-block-heading\">プロバイダーアカウントのセットアップ</h2>\n\n\n\n<p>プロバイダーのアカウントをセットアップします。プロバイダーとは、要はどのクラウドサービスを使用してServerlessを動かすかということです。AWS, GCP, Azure, IBM Cloudなど様々なクラウドプロバイダーに対応しています。<br>ここではAWSにスポットを当てて解説します。</p>\n\n\n\n<p><a href=\"https://serverless.com/framework/docs/providers/aws/setup/\" rel=\"noreferrer noopener\" target=\"_blank\">AWS account Setup</a><br>ここにAWSアカウントのセットアップ方法が書いていますが、要は以下を実施すればOKです。</p>\n\n\n\n<ul><li>Serverless用のIAMユーザを発行</li><li>IAMユーザに<code>AdministratorAccess</code>の管理ポリシーを与える</li></ul>\n\n\n\n<p>基本的にはこのアカウントを使って、ServerlessのデプロイやLambdaファンクションのローカルからの実行を行います。<br>また、IAMロールを制限したい場合は、<a href=\"https://github.com/puresec/serverless-puresec-cli\" rel=\"noreferrer noopener\" target=\"_blank\">serverless-puresec-cli</a>や<a href=\"https://github.com/serverless/serverless/issues/1439\" rel=\"noreferrer noopener\" target=\"_blank\">Narrowing the Serverless IAM Deployment Policy</a>を参考に独自でセットアップしましょう。</p>\n\n\n\n<h1 class=\"wp-block-heading\">サービスの作成</h1>\n\n\n\n<p>Serverlessは<code>サービス</code>という単位で実行環境を作っていきます。<br>まずはサービスを開設してみましょう。</p>\n\n\n\n<p>AWSをプロバイダーとしてNode.jsでサービスを開設する場合は以下の手順になります。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>$ serverless create --template aws-nodejs --name my-special-service --path my-special-service</code></pre>\n\n\n\n<p>すると、my-special-serviceのディレクトリが作られ、その配下に以下のファイルが出来ているはずです。<br>これでサービスの作成は完了です。</p>\n\n\n\n<ul><li>serverless.yml</li><li>handler.js</li></ul>\n\n\n\n<p>また、サービス用のテンプレートですが、以下の言語用のテンプレートが用意されています。</p>\n\n\n\n<ul><li>aws-nodejs</li><li>aws-nodejs-typescript</li><li>aws-nodejs-ecma-script</li><li>aws-python</li><li>aws-python3</li><li>aws-kotlin-jvm-maven</li><li>aws-kotlin-jvm-gradle</li><li>aws-kotlin-nodejs-gradle</li><li>aws-groovy-gradle</li><li>aws-java-maven</li><li>aws-java-gradle</li><li>aws-scala-sbt</li><li>aws-csharp</li><li>aws-fsharp</li></ul>\n\n\n\n<p>どの言語でLambdaを動かしたいかによってテンプレートを変更してあげましょう</p>\n\n\n\n<h2 class=\"wp-block-heading\">serverless.yml</h2>\n\n\n\n<p>serverless.ymlは各サービス全体の設定を行うためのファイルです。<br>AWSでは、以下のような設定が可能です。</p>\n\n\n\n<ul><li>サービス内のLambdaファンクション群の設定</li><li>Lambdaに設定されるIAMロールの設定</li><li>デプロイ時にどのファイル/ディレクトリを含めるか/含めないかの設定</li><li>使用するプラグインの定義</li><li>Lambdaファンクションごとのトリガーとなるイベントの定義</li><li>Lambdaファンクションが他のAWSリソースを連携する場合は、そのIAMを含めた定義</li></ul>\n\n\n\n<p>まずは、serverless.ymlの設定をしてあげましょう。もろもろサービスを実行するために必要な設定はすべてこのファイルで行います。</p>\n\n\n\n<h2 class=\"wp-block-heading\">handler.js</h2>\n\n\n\n<p>これはファンクションを定義するためのスケルトンとして生成されるファイルです。これを参考に実際のファンクションのプログラムを作っていきます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">event.json</h2>\n\n\n\n<p>ServerlessのCLIでファンクションを実行する際に入力値となるデータを定義するファイルです。Lambdaファンクション内で<code>event</code>変数に展開されます。</p>\n\n\n\n<p>※2022年4月時点ではテンプレートに event.json が含まれないので、後述しますがサンプルで event.json を利用する場合別途作成しておく必要があります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">Githubに上がった既存のサービスをインポートする場合</h2>\n\n\n\n<p>既にGithubに上がっている既存サービスの開発を行う場合は、そのままローカルにインポートしてServerlessをセットアップしたいと思います。その際は<code>serverless install -u [GITHUB URL OF SERVICE]</code>でインポート可能です。</p>\n\n\n\n<h1 class=\"wp-block-heading\">サービスのデプロイ</h1>\n\n\n\n<p>次に作ったサービスをプロバイダー上へデプロイしましょう。</p>\n\n\n\n<p><code>serverless deploy -v</code>でデプロイは開始されます。-vオプションを付けると<code>verbose</code>というモードでデプロイが実施され、途中経過がターミナル上で確認できます。</p>\n\n\n\n<p>また、Serverlessのデプロイには<code>stage</code>という概念が導入されています。いわゆる本番環境とテスト環境といった環境をstageという単位で切り分けています。</p>\n\n\n\n<p>Serverlessはデフォルトで、<code>dev</code>というステージかつ<code>us-east-1</code>リージョンにデプロイされるようになっています。<br>もしこれを変更したければ　<code>serverless.yml</code>に以下のように設定します。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>serverless.yml \n\nservice: service-name\nprovider:\n  name: aws\n  stage: beta\n  region: us-west-2</code></pre>\n\n\n\n<p>これで<code>beta</code>ステージの<code>us-west-2</code>リージョンにデプロイされるようになります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">serverless.ymlで定義したものと異なるサービス及びリージョンへのデプロイ</h2>\n\n\n\n<p>また、<code>deploy</code>コマンドはデプロイするstageやregionを引数で指定することも出来ます。</p>\n\n\n\n<p><code>production</code>ステージの<code>ap-northeast-1</code>リージョンに上げたければ、<code>serverless deploy --stage production --region ap-northeast-1</code>とすれば、引数通りの指定でデプロイが実施されます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">ファンクション単位のデプロイ</h2>\n\n\n\n<p><code>serverless deploy -v</code>はサービス全体のデプロイを行います。ファンクションの一部を修正したなどのケースで、サービス全体がデプロイされるのは大変です。<br>Serverlessはファンクション単位でのデプロイも<code>serverless deploy function -f &lt;yourfunction&gt;</code>にて可能です。</p>\n\n\n\n<h1 class=\"wp-block-heading\">ファンクションの実行</h1>\n\n\n\n<p>デプロイしたファンクションを実行してみましょう。</p>\n\n\n\n<h2 class=\"wp-block-heading\">event.json の作成</h2>\n\n\n\n<p>ServerlessのCLIでファンクションを実行する際に入力値となるデータを定義したファイルを作成します。Lambdaファンクション内で<code>event</code>変数に展開されます。</p>\n\n\n\n<pre class=\"wp-block-code language-json\"><code>{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\",\n  \"key3\": \"value3\"\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">helloファンクションの実行</h2>\n\n\n\n<p>サービス作成時にhandler.jsとして作成されるhelloファンクションを実行する場合を考えてみましょう。<code>serverless invoke --function hello -p event.json</code>で実行できます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">実行時にログを表示させる</h2>\n\n\n\n<p>ファンクションの実行時にログを見たいを思います。Lambdaの実行時にCloudwatchのログが同時に見れれば便利ですよね？ Serverlessはそれにも対応しています。<code>serverless invoke --function Yourfunction -p event.json --log</code>でlogオプションを付与するとこで以下の通りログが確認できます。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>$ serverless invoke --function hello -p event.json --log\n{\n    \"statusCode\": 200,\n    \"body\": \"{\\n  \\\"message\\\": \\\"Go Serverless v1.0! Your function executed successfully!\\\",\\n  \\\"input\\\": {\\n    \\\"key1\\\": \\\"value1\\\",\\n    \\\"key2\\\": \\\"value2\\\",\\n    \\\"key3\\\": \\\"value3\\\"\\n  }\\n}\"\n}\n--------------------------------------------------------------------\nSTART\nEND RequestId: 4767edc0-b1cc-4dcb-9128-2474967ec40a\nEND Duration: 2.09 ms Memory Used: 56 MB</code></pre>\n\n\n\n<p class=\"language-javascript\">body の中身をパースすると event.json の内容が含まれた以下のオブジェクトに展開されます。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n  message: 'Go Serverless v1.0! Your function executed successfully!',\n  input: {\n    key1: 'value1',\n    key2: 'value2',\n    key3: 'value3'\n  }\n}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">各ファンクションのログの履歴を確認する</h2>\n\n\n\n<p>後からファンクション毎のログを確認する場合は<code>serverless logs --function Yourfunction</code>というコマンドを実行します。</p>\n\n\n\n<p>すると以下の通りログがリストで表示されます。 </p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>$ serverless logs --function hello\nSTART\nEND Duration: 2.47 ms (init: 167.55 ms) Memory Used: 55 MB\nSTART\n2022-04-16 02:16:58.039\t{ key1: 'value1', key2: 'value2', key3: 'value3' }\nEND Duration: 4.56 ms (init: 155.54 ms) Memory Used: 55 MB</code></pre>\n\n\n\n<p>※確認のため handler.js 関数内で <code>console.log(event)</code> のようにログ出力を追加しています。</p>\n\n\n\n<h2 class=\"wp-block-heading\">他のAWSリソースにIAMでポリシーを設定する</h2>\n\n\n\n<p>実行時に他のAWSリソースを参照する場合は、serverless.yml内の<code>provider.iam</code>を使用して必要なポリシーを設定します。</p>\n\n\n\n<p>DynamoDBのexampleテーブルに対する全権限を付与する場合は以下のような設定をします。</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code># serverless.yml \nprovider: \n  iam:\n    role:\n      statements:\n        - Effect: \"Allow\"\n          Action:\n            - \"dynamodb:*\"\n          Resource:\n            - arn:aws:dynamodb:us-east-1:*:table/example</code></pre>\n\n\n\n<h1 class=\"wp-block-heading\">イベントトリガーの設定</h1>\n\n\n\n<p>Serverless Frameworkはファンクションにイベントを設定することでイベント駆動のアーキテクチャを実現することをサポートしています。</p>\n\n\n\n<p>イベントにはHTTPリクエスト(AWSではAPI Gateway)やS3 bucket、スケジュールイベントなど、設定を行うことが出来ます。</p>\n\n\n\n<p>今回は、AWS Gatewayを使用したhttpイベントの設定を例にあげます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">HTTP eventを追加する</h2>\n\n\n\n<p><code>greet</code>というパスでhttpリクエストを受けた場合に<code>hello</code>ファンクションを実行させたい場合は以下のようにserverless.ymlを設定します。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code># serverless.yml\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      # HTTP API endpoint (API Gateway v2)\n      - httpApi:\n          path: /greet\n          method: GET\n      # REST API endpoint (API Gateway v1)\n      - http:\n          path: /greet\n          method: GET</code></pre>\n\n\n\n<p>この設定を行い、<code>serverless deploy</code>を実行してデプロイに成功すれば以下のようなEndpointがターミナル上に表示されるはずです。 上が REST API、下が HTTP API のエンドポイントです。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>endpoints:\n  GET - https://xxx.execute-api.us-east-1.amazonaws.com/dev/greet\n  GET - https://yyy.execute-api.us-east-1.amazonaws.com/greet</code></pre>\n\n\n\n<p>これに対して実際にリクエストを送ってみるとLambdaで定義した返り値が返ってくるはずです。 </p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>$ curl https://xxx.execute-api.us-east-1.amazonaws.com/dev/greet\n$ curl https://yyy.execute-api.us-east-1.amazonaws.com/greet</code></pre>\n\n\n\n<p><a href=\"https://serverless.com/framework/docs/providers/aws/events/apigateway/\" rel=\"noreferrer noopener\" target=\"_blank\">https://serverless.com/framework/docs/providers/aws/events/apigateway/</a><br>API Gatewayを使ったhttpイベントは様々なパラメータを設定することが可能です。詳しくは公式のドキュメントを確認してみてください。個人的にはlambda-proxyの機能が、手軽にLambdaからステータスコードの設定が出来て便利だと感じています。</p>\n\n\n\n<p>また、現段階でAWSをプロバイダーとして以下のイベントが設定可能です。</p>\n\n\n\n<ul><li>API Gatewayを使用したhttpイベント</li><li>S3の操作をトリガーとしたイベント</li><li>Lambdaのスケジュールイベント</li><li>SNSの通知をトリガーとしたイベント</li><li>DynamoDB / Kinesis Streamsイベント</li><li>Allexa Skill / Alexa Smart Homeイベント</li><li>AWS IoTイベント</li><li>CloudWatch　Event</li><li>CloudWatch　Log</li><li>Cognito User Poolのトリガーファンクション</li><li>SQS</li></ul>\n\n\n\n<p><a href=\"https://serverless.com/framework/docs/providers/aws/events/\">https://serverless.com/framework/docs/providers/aws/events/</a></p>\n\n\n\n<h1 class=\"wp-block-heading\">Serverlessで使用できる変数</h1>\n\n\n\n<p>Serverless Frameworkは<code>serverless.yml</code>内で変数を定義することで柔軟なサービス設定が可能となっています。</p>\n\n\n\n<h2 class=\"wp-block-heading\">環境変数を参照する</h2>\n\n\n\n<p>環境変数を参照する場合は<code>${env:SOME_VAR}</code>というシンタックスをserverless.ymlに記述します。以下がその例です。serverless.yml </p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>service: new-service\nprovider: aws\nfunctions:\n  hello:\n      name: ${env:FUNC_PREFIX}-hello\n      handler: handler.hello\n  world:\n      name: ${env:FUNC_PREFIX}-world\n      handler: handler.world</code></pre>\n\n\n\n<p>この例ではあなたのPC内の<code>FUNC_PREFIX</code>という環境変数を参照するようになりました。</p>\n\n\n\n<h2 class=\"wp-block-heading\">CLIオプションを参照する</h2>\n\n\n\n<p>serverlessコマンド実行時のオプションを参照させたい場合は<code>${opt:SOME_VAR}</code>というシンタックスをserverless.ymlに記述します。以下がその例です。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>serverless.yml\n\nservice: new-service\nprovider: aws\nfunctions:\n  hello:\n      name: ${opt:stage}-hello\n      handler: handler.hello\n  world:\n      name: ${opt:stage}-world\n      handler: handler.world</code></pre>\n\n\n\n<p><code>serverless deploy --stage dev</code>とした場合は、<code>${opt:stage}</code>はdevが返ります。また、<code>serverless deploy --stage production</code>とした場合は、productionが返ります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">自身で定義した変数を参照する</h2>\n\n\n\n<p>serverless.yml内で自身で定義した変数を参照させることも出来ます。<code>${self:someProperty}</code>というシンタックスで定義可能です。以下がその例です。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>serverless.yml \n\nservice: new-service\nprovider: aws\ncustom:\n  globalSchedule: rate(10 minutes)\n\nfunctions:\n  hello:\n      handler: handler.hello\n      events:\n        - schedule: ${self:custom.globalSchedule}\n  world:\n      handler: handler.world\n      events:\n        - schedule: ${self:custom.globalSchedule}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">他のファイルで定義した変数を参照する</h2>\n\n\n\n<p>serverless.ymlとは別で定義したファイルを読み込んで、その変数を参照することも出来ます。<code>${file(../myFile.yml):someProperty}</code>というシンタックスでserverless.ymlに定義してください。以下がその例になります。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>myCustomFile.yml \n\nglobalSchedule: rate(10 minutes)</code></pre>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>serverless.yml \n\nservice: new-service\nprovider: aws\ncustom: ${file(../myCustomFile.yml)} # You can reference the entire file\nfunctions:\n  hello:\n      handler: handler.hello\n      events:\n        - schedule: ${file(../myCustomFile.yml):globalSchedule} # Or you can reference a specific property\n  world:\n      handler: handler.world\n      events:\n        - schedule: ${self:custom.globalSchedule} # This would also work in this case</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">変数のネスト</h2>\n\n\n\n<p>以下のように変数をネストさせることも可能です。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>serverless.yml \n\nservice: new-service\nprovider: aws\ncustom:\n  myFlexibleArn: ${env:${opt:stage}_arn}\n\nfunctions:\n  hello:\n      handler: handler.hello</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">変数の上書き</h2>\n\n\n\n<p>以下のような記述を例にあげます。</p>\n\n\n\n<pre class=\"wp-block-code language-shell\"><code>serverless.yml\n\nservice: new-service\nprovider:\n  name: aws\n  stage: dev\ncustom:\n  myStage: ${opt:stage, self:provider.stage}\n\nfunctions:\n  hello:\n      handler: handler.hello</code></pre>\n\n\n\n<p>この場合に<code>serverless deploy</code>を発行したとします。この時、<code>opt:stage</code>は定義されていないため、<code>self:provider.stage</code>に定義されているdevが参照されます。</p>\n\n\n\n<p><code>serverless deploy --stage production</code>が指定されている場合は、<code>opt:stage</code>が定義されているため<code>opt:stage</code>が優先して参照されます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">サービスの削除</h2>\n\n\n\n<p>あなたのつくったサービス内で、<code>serverless remove</code>を実行してください。これでサービスがプロバイダー上から削除されます。</p>\n\n\n\n<h1 class=\"wp-block-heading\">Tips</h1>\n\n\n\n<h3 class=\"wp-block-heading\">アクセスキーなど見せたくない情報をserverless.ymlで扱う</h3>\n\n\n\n<p>SSM秘匿パラメータの機能を使いましょう<br><a rel=\"noreferrer noopener\" href=\"https://serverless.com/framework/docs/providers/aws/guide/variables/#reference-variables-using-the-ssm-parameter-store\" target=\"_blank\">https://serverless.com/framework/docs/providers/aws/guide/variables/#reference-variables-using-the-ssm-parameter-store</a></p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2022.04.18","path":"/blog/25/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/https___camo.githubusercontent.jpeg","altText":"","mediaDetails":{"width":1950}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}