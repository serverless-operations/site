{"hash":"51bbfd82cb20fb429b7eb8047edc7c53796980aa","data":{"wordPressBlog":{"title":"Next.js アプリケーションを AWS Amplify でホスティングする上でのTIPS","content":"\n<p>※ 2021 re:Invent のアップデート次第でタイムリーに内容が更新されることがあります。</p>\n\n\n\n<p>2021年5月、Next.js のホスティング先として <a rel=\"noreferrer noopener\" href=\"https://aws.amazon.com/jp/about-aws/whats-new/2021/05/aws-amplify-hosting-announces-server-side-rendering-support-for-next-js-web-apps/\" data-type=\"URL\" data-id=\"https://aws.amazon.com/jp/about-aws/whats-new/2021/05/aws-amplify-hosting-announces-server-side-rendering-support-for-next-js-web-apps/\" target=\"_blank\">AWS Amplify Console が対応可能になったお知らせ</a>により、SSR（Server-side rendering）においても Vercel や自前のホスティング環境を構築する以外のもう一つの選択肢として Amplify Console が利用できるようになりました。以前より <a rel=\"noreferrer noopener\" href=\"https://www.serverless.com/blog/serverless-nextjs\" data-type=\"URL\" data-id=\"https://www.serverless.com/blog/serverless-nextjs\" target=\"_blank\">Serverless Nextjs Component</a> を使うという方法もありましたが、Amplify Console を使うとフロントエンドのインフラ構築がほぼコードレスに対応できる点でオススメする方法となります。</p>\n\n\n\n<p>この記事では、Amplify Console を使った基本的な Next.js のホスティング設定方法を紹介しつつ、いくつか TIPS を紹介します。</p>\n\n\n\n<h2 class=\"wp-block-heading\">Amplify Console を利用したホスティング方法</h2>\n\n\n\n<p>まず、デプロイする Next.js アプリのテンプレートを作成します。<a href=\"https://nextjs.org/docs/api-reference/create-next-app\" data-type=\"URL\" data-id=\"https://nextjs.org/docs/api-reference/create-next-app\">create-next-app</a> を利用して新規プロジェクトとソースコードのテンプレートを展開します。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>npx create-next-app@latest --ts\n# or\nyarn create next-app --typescript</code></pre>\n\n\n\n<p>プロジェクト名を入力すると、コマンドを実行したところに指定した名前で新しくディレクトリが作成されます。そのままビルドして実行（ <code>yarn build &amp;&amp; yarn start</code> ）すると、以下のようなサンプル画面が表示されます。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"561\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-13.56.38-1024x561.jpg\" alt=\"\" class=\"wp-image-431\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-13.56.38-1024x561.jpg 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-13.56.38-300x164.jpg 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-13.56.38-768x421.jpg 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-13.56.38-1536x842.jpg 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-13.56.38.jpg 2000w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>これをデプロイしてホスティングしてみます。Amplify Console では、GitHub/GitLab/BitBucket 等のリポジトリからソースコードを連携し、AWS 環境内でCI/CDの仕組みを自動構築することができます。まずはサンプルとして GitHub リポジトリを作成し、テンプレートのソースコードをコミットしておきます。</p>\n\n\n\n<pre class=\"wp-block-code language-bash\"><code>git remote add origin https://github.com/&lt;GITHUB_USERNAME&gt;/amplify-hosting-next-app.git\ngit branch -M main\ngit push -u origin main</code></pre>\n\n\n\n<p>AWS コンソールを開き、AWS Amplify &gt; Host your web app を選択します。</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.52.06.png\" alt=\"\" class=\"wp-image-432\" width=\"352\" height=\"301\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.52.06.png 502w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.52.06-300x257.png 300w\" sizes=\"(max-width: 352px) 100vw, 352px\" /></figure></div>\n\n\n\n<p>続いて From your existing code &gt; GitHub &gt; Continue を選択、GitHubでの認可の手続きを経て、先程作成したリポジトリとブランチを選択します。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"546\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.59.20-1024x546.png\" alt=\"\" class=\"wp-image-433\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.59.20-1024x546.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.59.20-300x160.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.59.20-768x410.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-20.59.20.png 1115w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>特に問題なければ Next を押して進みます。Next.js テンプレートであれば、基本的に自動で Server-side rendering deployment と検知してくれます。もし npm scripts 内で <code>next export</code> を使ってビルドする場合、SSR ではなく SSG（通常の静的アセット配信）として認識してくれるので、別途設定を行う必要がなく便利です。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"617\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.03.52-1024x617.png\" alt=\"\" class=\"wp-image-434\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.03.52-1024x617.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.03.52-300x181.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.03.52-768x462.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.03.52.png 1121w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>SSGの場合 artifacts.baseDirectory が out になります</figcaption></figure>\n\n\n\n<p>Advanced settings ではビルドで利用する Docker イメージや環境変数の指定ができます。後から変更することもできますので、開発が進むにつれて適宜変更していく想定で問題ないです。最初の時点では特に触れる必要がないため、引き続き Next を押して進めます。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"278\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.16.40-1024x278.png\" alt=\"\" class=\"wp-image-435\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.16.40-1024x278.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.16.40-300x81.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.16.40-768x209.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.16.40.png 1108w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /><figcaption>SSG の場合 Framework: Next.js &#8211; SSG と表示されます</figcaption></figure>\n\n\n\n<p>それでは、Save and deploy を押してデプロイしてみましょう。</p>\n\n\n\n<p>（※初回ビルドに失敗する場合はこの記事の次のセクションをご参照ください）</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"282\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.56.08-1024x282.png\" alt=\"\" class=\"wp-image-438\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.56.08-1024x282.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.56.08-300x83.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.56.08-768x211.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.56.08.png 1162w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>以降、指定したブランチへの push イベントを受けて自動デプロイされるようになります（※設定で無効化可能）。ビルドに成功すると発行されたURLを開いて画面を確認し、最初にローカルで実行したのと同じ画面が表示されていれば、ホスティング完了です。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"643\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-22.02.39-1024x643.jpg\" alt=\"\" class=\"wp-image-439\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-22.02.39-1024x643.jpg 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-22.02.39-300x188.jpg 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-22.02.39-768x482.jpg 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-22.02.39.jpg 1307w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">デフォルトのビルド環境で Node.js バージョンを指定する方法</h2>\n\n\n\n<p>デフォルトのビルドで利用するイメージの Node.js バージョンが v12 とやや古いため、現時点では初回のビルド実行で以下のエラーメッセージと共に失敗するようになります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"335\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.33.54-1024x335.jpg\" alt=\"\" class=\"wp-image-436\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.33.54-1024x335.jpg 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.33.54-300x98.jpg 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.33.54-768x251.jpg 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.33.54.jpg 1259w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>これを解決するためには、ビルドを実行する環境の Node.js バージョンを上げておく必要があります。幸い <code>nvm</code> が利用できるので、preBuild の時点で必要な Node.js バージョンをインストール、<code>nvm use</code> を使って指定しておくことで解決できます。</p>\n\n\n\n<pre class=\"wp-block-code\"><code>version: 1\nfrontend:\n  phases:\n    preBuild:\n      commands:\n        - nvm install 16.13.0\n        - nvm use 16.13.0\n        - node -v\n        - yarn install</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"641\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.36.58-1024x641.jpg\" alt=\"\" class=\"wp-image-437\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.36.58-1024x641.jpg 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.36.58-300x188.jpg 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.36.58-768x481.jpg 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-21.36.58.jpg 1139w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">SSR → SSG, SSG → SSR への変換はできない</h2>\n\n\n\n<div class=\"wp-block-columns is-layout-flex wp-container-7\">\n<div class=\"wp-block-column is-layout-flow\">\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"123\" height=\"68\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-22.20.33-1.png\" alt=\"\" class=\"wp-image-444\"/></figure></div>\n</div>\n\n\n\n<div class=\"wp-block-column is-layout-flow\">\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"113\" height=\"64\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/11/Screen-Shot-2021-11-30-at-22.20.22-2.png\" alt=\"\" class=\"wp-image-443\"/></figure></div>\n</div>\n</div>\n\n\n\n<p>App Settings &gt; General にて、上記のように SSR / SSG のどちらで動作するかについて確認できるようになっています。ただし一度 SSR か SSG に指定されると、後から変更することは現状できないので注意が必要です。もし途中から変更したい場合、別途新しい App を追加・連携してホスティングする必要があります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">その他、ウェブアプリに必要な基本的な設定</h2>\n\n\n\n<p>Amplify Console はホスティングに関連する様々な機能が提供されています。SSL証明書発行を含むドメイン設定、ベーシック認証によるアクセスコントロール、リダイレクト設定など、従来の静的ファイル配信の定番構成 S3 + CloudFront を構築した経験があれば簡単にイメージできる機能が揃っています。</p>\n\n\n\n<p>ベーシック認証によるアクセスコントロールについては、当初 SSR では非対応でしたが、現時点では対応されているので利用可能になっています。</p>\n\n\n\n<p>これらの機能についてはコンソール左側のメニュー <code>App settings</code> から適宜選択して設定を行うことができます。ただし、自前でホスティングする場合や CloudFront ディストリビューションを直接操作する場合に比べればできることが限られてくるので、Amplify Console を利用する場合は可能な限りフロントエンドのインフラ環境が複雑な構成にならないようにすることを念頭に置きつつ、アプリケーションの開発に集中することがポイントになります。</p>\n","author":{"name":"Sonu Kim","description":"","avatars":{"avatar96":"https://secure.gravatar.com/avatar/5b527696e38c84c34048954d767b1537?s=96&d=mm&r=g"},"acf":{"userJpName":"金 仙優","userRole":"COO","facebook":"","twitter":"","github":""}},"date":"2021.11.30","path":"/blog/429/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"53","title":"Amplify","path":"/tag/amplify/"},{"id":"55","title":"Next.js","path":"/tag/next-js/"},{"id":"57","title":"React","path":"/tag/react/"},{"id":"60","title":"Server-side rendering","path":"/tag/server-side-rendering/"},{"id":"2","title":"Serverless","path":"/tag/serverless/"},{"id":"58","title":"SSR","path":"/tag/ssr/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}