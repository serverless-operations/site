{"hash":"e5bf1eed04e22915fe60df772657de15feda3786","data":{"wordPressBlog":{"title":"brefを使って簡単にLambdaのPHP Custom Runtime環境を構築する","content":"\n<h2 class=\"wp-block-heading\">概要</h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"396\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_2eb95b0b-29ab-0274-8eab-276f746ca0f1-1024x396.png\" alt=\"\" class=\"wp-image-39\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_2eb95b0b-29ab-0274-8eab-276f746ca0f1-1024x396.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_2eb95b0b-29ab-0274-8eab-276f746ca0f1-300x116.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_2eb95b0b-29ab-0274-8eab-276f746ca0f1-768x297.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_2eb95b0b-29ab-0274-8eab-276f746ca0f1.png 1400w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>LambdaでPHPを動かすためにはCustom Runtimeの機能を使って、自分でランタイム環境をビルドして、bootstrapというCustom Runtimeのエンドポイントとなるファイルを用意する必要があります。</p>\n\n\n\n<p>しかし、<a rel=\"noreferrer noopener\" href=\"https://bref.sh/\" target=\"_blank\">bref</a>というサーバーレス環境でPHPを動かすためのツールとServerless Frameworkを使うことで非常に簡単にPHPのCustom Runtime環境が構築できたのでその紹介をしたいと思います。</p>\n\n\n\n<h2 class=\"wp-block-heading\">使い方</h2>\n\n\n\n<h3 class=\"wp-block-heading\">テンプレートからプロジェクトを作成</h3>\n\n\n\n<p>brefのgithubリポジトリにサンプルとなるプロジェクトが公開されているのでそれを元にローカルにプロジェクトをセットアップします</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ serverless create --template-url https://github.com/brefphp/bref/tree/master/template/default --path sls-phpapp\n$ cd sls-phpapp</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">composerでbrefをインストール</h3>\n\n\n\n<p>プロジェクト配下でcomposerを使ってインストールを行います</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ composer require bref/bref</code></pre>\n\n\n\n<h3 class=\"wp-block-heading\">serverless.ymlの書き方</h3>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>service: app\n\nprovider:\n    name: aws\n    region: us-east-1\n    runtime: provided\n\nplugins:\n    - ./vendor/bref/bref\n\nfunctions:\n    function:\n        handler: index.php\n        description: ''\n        layers:\n            - ${bref:layer.php-73}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">SQSバックエンドなアプリケーションを構成する</h2>\n\n\n\n<p>Lambdaはイベントソースをトリガーとして起動させるので、今回はSQSバックエンドLambdaを構成して動かしてみます。<br>以下がそのserverless.ymlになります</p>\n\n\n\n<pre class=\"wp-block-code language-yaml\"><code>service: phpapp\n\nprovider:\n    name: aws\n    region: ap-northeast-1\n    runtime: provided\n\nplugins:\n    - ./vendor/bref/bref\n\nfunctions:\n    function:\n        handler: index.php\n        description: ''\n        layers:\n            - ${bref:layer.php-73}\n        events:\n          - sqs:\n              arn:\n                Fn::GetAtt:\n                  - PhpQueue\n                  - Arn\n\nresources:\n  Resources:\n    PhpQueue:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: phpqueue</code></pre>\n\n\n\n<p>そして、<code>index.php</code>で<code>event</code>をダンプさせます</p>\n\n\n\n<pre class=\"wp-block-code language-php\"><code>&lt;?php \ndeclare(strict_types=1);\nrequire __DIR__.'/vendor/autoload.php';\n\nlambda(function ($event) {\n    var_dump($event);\n});</code></pre>\n\n\n\n<p>これで準備完了です。デプロイしましょう</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ serverless deploy</code></pre>\n\n\n\n<p>デプロイが完了したらSQSにメッセージを送ってこのLambdaが動くか動作確認します。</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ aws sqs send-message --queue-url https://sqs.ap-northeast-1.amazonaws.com/&lt;アカウントID>/&lt;queue名> --message-body aaa</code></pre>\n\n\n\n<p>CloudWatchLogsを見てみると、正しくメッセージが処理されていることがわかります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"504\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_4a3428d0-6045-7add-aff8-7ee807eeda18-1024x504.png\" alt=\"\" class=\"wp-image-40\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_4a3428d0-6045-7add-aff8-7ee807eeda18-1024x504.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_4a3428d0-6045-7add-aff8-7ee807eeda18-300x148.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_4a3428d0-6045-7add-aff8-7ee807eeda18-768x378.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_4a3428d0-6045-7add-aff8-7ee807eeda18.png 1400w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">php.iniを編集する</h2>\n\n\n\n<p>デフォルトではLambdaの実行に最適化されたphp.iniがデプロイされています。<br>設定をカスタマイズしたい場合は、プロジェクト直下に<code>php/conf.d/php.ini</code>を配置して設定の記述を行います。</p>\n\n\n\n<p>brefは自動で<code>php/conf.d/*.ini</code>で設定内容をincludeしてくれるようです。</p>\n\n\n\n<h2 class=\"wp-block-heading\">エクステンションを追加する</h2>\n\n\n\n<p>デフォルトでは以下のエクステンションがインストールされているようです。<br><a rel=\"noreferrer noopener\" href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F65478%2F879c07f9-639c-8bc0-bdde-a2f6f5a8535c.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6843c0ddd285f9ed3c8c284ad9ece92c\" target=\"_blank\"></a></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"768\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_879c07f9-639c-8bc0-bdde-a2f6f5a8535c-1024x768.png\" alt=\"\" class=\"wp-image-41\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_879c07f9-639c-8bc0-bdde-a2f6f5a8535c-1024x768.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_879c07f9-639c-8bc0-bdde-a2f6f5a8535c-300x225.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_879c07f9-639c-8bc0-bdde-a2f6f5a8535c-768x576.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_879c07f9-639c-8bc0-bdde-a2f6f5a8535c.png 1274w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>ここにないエクステンションは、自身でそのエクステンション用のLambda layerを作成して、<code>php.ini</code>に設定することで使用可能になるようです。</p>\n\n\n\n<h2 class=\"wp-block-heading\">まとめ</h2>\n\n\n\n<p>brefを使うことでかなり簡単にPHPのLambda環境を作ることが出来ました。カスタマイズについてもphpの設定やエクステンションも自由に追加できるため、多くのプロジェクトでは特に問題なく採用できるのでは無いでしょうか。</p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2020.01.26","path":"/blog/38/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/01/https___qiita-image-store.s3.ap-northeast-1.amazonaws.com_0_65478_2eb95b0b-29ab-0274-8eab-276f746ca0f1.png","altText":"","mediaDetails":{"width":1912}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"10","title":"Lambda","path":"/tag/lambda/"},{"id":"12","title":"PHP","path":"/tag/php/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}