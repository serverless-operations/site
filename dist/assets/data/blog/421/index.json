{"hash":"d3dc5a74472b579ca6ae7ca671dc4f013853a504","data":{"wordPressBlog":{"title":"API Gateway+LambdaでProvisioned ConcurrencyのAutoScalingをCDKを使って有効化する","content":"\n<p>API Gateway(HTTP API)+Lambdaの構成にする時にProvisioned Concurrencyを有効にしてコールドスタート対策を行うケースがあると思います。コストは通常のLambdaに比べて大幅に増加してしまいますが、それでもパフォーマンス面で費用対効果にメリットがある場合は有効なオプションです。</p>\n\n\n\n<p>CDKでこれらを設定する場合に、単純にLambdaのオプションを有効化すれば良いというだけではありません。<br>LambdaのAliasを作成してそこに対してAPI GatewayのインテグレーションやIAMポリシーの設定をしたり、必要に応じてAuto Scalingの設定をしたりと少し煩雑です。</p>\n\n\n\n<p>この記事ではそれらの実装方法を備忘録として書いています。</p>\n\n\n\n<h2 class=\"wp-block-heading\">CDKの実装のポイント</h2>\n\n\n\n<p>まず、<code>NodejsFunction</code>コンストラクタで作成したLambdaにAliasを有効化します。名前は分かりやすく<code>Provisioned</code> とかで良いかと思います。</p>\n\n\n\n<pre class=\"wp-block-code language-typescript\"><code>const apiBackedFunctionAlias = apiBackedFunction.currentVersion.addAlias('provisioned')</code></pre>\n\n\n\n<p>そして以下の通りAutoScalingの設定をこのAliasに行います。以下の通り設定すると最低のLambdaインスタンス数が5、最大が30そしてインスタンス数の7割を消費すると新たなインスタンスが起動する設定になっています。</p>\n\n\n\n<pre class=\"wp-block-code language-typescript\"><code>apiBackedFunctionAlias.addAutoScaling(\n      {\n        maxCapacity: 30,\n        minCapacity: 5,\n      }\n    ).scaleOnUtilization({\n      utilizationTarget: 0.7\n    })\n</code></pre>\n\n\n\n<p>API GatewayからのIAM設定もLambdaファンクション自体ではなくてAliasに対して行うことを注意して下さい。</p>\n\n\n\n<pre class=\"wp-block-code language-typescript\"><code>apiBackedFunctionAlias.addPermission('testFunctionPermission', {\n      principal: new iam.ServicePrincipal('apigateway.amazonaws.com'),\n      action: 'lambda:InvokeFunction',\n      sourceArn: `arn:aws:execute-api:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:${api.ref}/*/*/*`,\n    })</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\"><meta charset=\"utf-8\">CDKの実装全体</h2>\n\n\n\n<p>以下が実装の全体です。</p>\n\n\n\n<pre class=\"wp-block-code language-typescript\"><code>import * as cdk from '@aws-cdk/core'\nimport { Runtime, Tracing } from '@aws-cdk/aws-lambda'\nimport { NodejsFunction } from '@aws-cdk/aws-lambda-nodejs'\nimport { CfnApi, CfnStage } from '@aws-cdk/aws-apigatewayv2'\nimport * as iam from '@aws-cdk/aws-iam'\n\nexport interface ApiProps extends cdk.StackProps {\n  stage: string\n}\n\nexport class ApiStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: ApiProps) {\n    super(scope, id, props)\n    const apiBackedexecutionLambdaRole = new iam.Role(this, `testApiBackedFunctionRole-${props.stage}`, {\n      roleName: `apiBackedFunctionRole-${props.stage}`,\n      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n      managedPolicies: &#91;\n        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),\n      ]\n    })\n\n    const apiBackedFunction = new NodejsFunction(this, 'testApiBackedFunction', {\n      entry: 'src/api.ts',\n      handler: 'handler',\n      runtime: Runtime.NODEJS_14_X,\n      timeout: cdk.Duration.seconds(30),\n      memorySize: 1024,\n      bundling: {\n        forceDockerBundling: false,\n        sourceMap: true\n      },\n      role: apiBackedexecutionLambdaRole,\n    })\n\n    const apiBackedFunctionAlias = apiBackedFunction.currentVersion.addAlias('provisioned')\n    apiBackedFunctionAlias.addAutoScaling(\n      {\n        maxCapacity: 30,\n        minCapacity: 5,\n      }\n    ).scaleOnUtilization({\n      utilizationTarget: 0.7\n    })\n\n    const integrationSetting = {\n      type: 'AWS_PROXY',\n      httpMethod: 'POST',\n      uri: apiBackedFunctionAlias.functionArn,\n      payloadFormatVersion: '1.0',\n    }\n\n    const api = new CfnApi(this, 'httpApi')\n\n    const apiRole = new iam.Role(this, 'RestApiAuthHandlerRole', {\n      assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),\n    })\n    apiBackedFunctionAlias.grantInvoke(apiRole)\n\n    const policyStatement = new iam.PolicyStatement({\n      effect: iam.Effect.ALLOW,\n      actions: &#91; 'sts:AssumeRole' ],\n      resources: &#91; '*' ],\n    })\n    const assumePolicy = new iam.Policy(this, 'StsAssumeForApigateway')\n    assumePolicy.addStatements(policyStatement)\n    apiRole.attachInlinePolicy(assumePolicy)\n\n    new CfnStage(this, `Bousai-${props.stage}`, {\n      apiId: api.ref,\n      stageName: '$default',\n      autoDeploy: true,\n    })\n\n    apiBackedFunctionAlias.addPermission('testFunctionPermission', {\n      principal: new iam.ServicePrincipal('apigateway.amazonaws.com'),\n      action: 'lambda:InvokeFunction',\n      sourceArn: `arn:aws:execute-api:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:${api.ref}/*/*/*`,\n    })\n  }\n}\n</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">動作確認</h2>\n\n\n\n<p>CDKでのデプロイが完了するとキャプチャの通り、指定した数だけLambdaがプロビジョニングされています。AutoScalingの設定が有効になっているかはマネンジメントコンソールからは分かりませんが、実際にAPiに負荷をかけると発動することが分かります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"250\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/10/スクリーンショット-2021-10-12-16.10.24-1024x250.png\" alt=\"\" class=\"wp-image-422\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/10/スクリーンショット-2021-10-12-16.10.24-1024x250.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/10/スクリーンショット-2021-10-12-16.10.24-300x73.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/10/スクリーンショット-2021-10-12-16.10.24-768x188.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/10/スクリーンショット-2021-10-12-16.10.24-1536x375.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2021/10/スクリーンショット-2021-10-12-16.10.24-2048x500.png 2048w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2021.10.12","path":"/blog/421/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/05/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"9","title":"API Gateway","path":"/tag/api-gateway/"},{"id":"42","title":"CDK","path":"/tag/cdk/"},{"id":"10","title":"Lambda","path":"/tag/lambda/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}