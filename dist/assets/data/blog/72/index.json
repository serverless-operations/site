{"hash":"35053359aff549c8e1d81009f00eae950570ae45","data":{"wordPressBlog":{"title":"AWS Python Lambda向けのアプリケーションフレームワークJeffy1.1をリリースしました！","content":"\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"480\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/logo-1024x480.png\" alt=\"\" class=\"wp-image-73\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/logo-1024x480.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/logo-300x141.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/logo-768x360.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/logo-1536x719.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/logo.png 1800w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>メジャーバージョンアップ版のv1.1をリリースしました！GAリリースしてからいくつかのフィードバックをもらった上での改善を含むバージョンになります。</p>\n\n\n\n<p><a href=\"https://pypi.org/project/jeffy/\">https://pypi.org/project/jeffy/</a></p>\n\n\n\n<h2 class=\"wp-block-heading\">Jeffyエンコーダーの仕様について</h2>\n\n\n\n<p>まず、仕様が少し分かりづらいとフィードバックをもらったJeffyのエンコーダーの機能について少し説明したいと思います。</p>\n\n\n\n<p>この機能は主にLambda及びその他のAWSサービス間でやり取りされるメッセージの仕様を統一するためのいわゆる「型」としての働きをします。マイクロサービスの始端から終端までメッセージの型が定義されることで、開発者はより堅守で安全かつ効率的にLambdaを実装していくことが可能となります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"478\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/スクリーンショット-2020-06-23-22.53.48-1024x478.png\" alt=\"\" class=\"wp-image-74\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/スクリーンショット-2020-06-23-22.53.48-1024x478.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/スクリーンショット-2020-06-23-22.53.48-300x140.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/スクリーンショット-2020-06-23-22.53.48-768x359.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/スクリーンショット-2020-06-23-22.53.48.png 1524w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>現在、エンコーディングには以下の2種類存在しています</p>\n\n\n\n<figure class=\"wp-block-table is-style-regular\"><table><tbody><tr><td>エンコーダ名</td><td>用途</td></tr><tr><td>jeffy.encoding.json.JsonEncoding</td><td>JSONフォーマット用エンコーディング。S3以外は今の所デフォルトでこれを採用</td></tr><tr><td>jeffy.encoding.bytes.BytesEncoding</td><td>バイナリデータを扱う用のエンコーディング</td></tr></tbody></table></figure>\n\n\n\n<p>Jeffy内部ではboto3をラップしたAWS SDKを有していますが、LambdaからAWSサービスにメッセージをPublishする際にメッセージを自動でデフォルトのエンコーディングでエンコードします。そして、イベントソースからLambdaがメッセージをsubscribeする際にはそのイベントソースとなるAWSサービスのデフォルトエンコーディングに沿ってデコードし、そのメッセージをLambda内部で処理できるようにします。</p>\n\n\n\n<p>そして以下の様にソース内で明示的にエンコーダーを開発者側で指定することもできます。各AWSサービスのデフォルトエンコーダはGitHubのREADMEを確認してみてください。</p>\n\n\n\n<pre class=\"wp-block-code language-py\"><code>from jeffy.framework import get_app\nfrom jeffy.encoding.bytes import BytesEncoding\nfrom jeffy.sdk.kinesis import Kinesis\n\napp = get_app()\nbytes_encoding = BytesEncoding()\n\n@app.handlers.kinesis_streams(encoding=bytes_encoding) # BytesEncodingの仕様に沿ってデコードする\ndef handler(event, context):\n    kinesis = Kinesis(encoding=bytes_encoding) # BytesEncodingの仕様に沿ってエンコードする\n    kinesis.put_record(\n        stream_name=os.environ&#91;'STREAM_NAME'],\n        data=bytes_encoding.encode('foo'.encode('utf-8)),\n        partition_key='your-partition-key'\n    )</code></pre>\n\n\n\n<p>この仕組みによりPub &#8211; Subの関係で構成されるイベントドリブンなアーキテクチャにおいてメッセージの仕様を統一することを簡略化します。</p>\n\n\n\n<p>現状では、このエンコーディングの選択肢はほぼありませんが、今後ProtocolBuffersなど新しいエンコーディングの追加を考えています。<br>その他、どのようにメッセージ交換を行っているかといったユースケースや、希望などを是非お聞かせください！！</p>\n\n\n\n<h2 class=\"wp-block-heading\">追加された機能</h2>\n\n\n\n<p>v1.1で追加された機能は以下のとおりです。</p>\n\n\n\n<h3 class=\"wp-block-heading\">AWS SDKクライアントへのデフォルトエンコーダ機能</h3>\n\n\n\n<p>v1.0まではデコレータはデフォルトのエンコーディングで暗黙的にデコードされていましたが、Jeffyが持つAWS SDKクライアントには明示的に使用するエンコーディングでエンコードしたデータを渡す必要がありました。これを、SDKクライアントにもデフォルトのエンコーディングを持たせ、暗黙的にエンコードされたデータが送信されるように変更し、よりユーザは意識しなくても統一されたエンコーディングによるイベントの送受信が行えるようになりました。<br>もちろん、このエンコーディングは明示的に上書きすることもできるので、デフォルトのエンコーディングの利用を強制するものではありません。</p>\n\n\n\n<p>今回のアップデートにより、ユーザは意識しなくてもPublisher側とSubscriber側でメッセージの仕様の統一が行われ、明示的に変更する場合にも、それをどのように行うべきかが分かりやすくなりました。</p>\n\n\n\n<h3 class=\"wp-block-heading\">AWS SDKクライアント側でCorrelationIDを自動生成する機能</h3>\n\n\n\n<p>CorrelationIDとは、Jeffy内部でメッセージをトレースするための乱数を生成して引き継ぐための仕組みです。</p>\n\n\n\n<p>これまではCorrelationIDが存在しない場合にはSubscriberとなるデコレータ内で自動生成を行なっていましたが、今回からはAWS SDKクライアントで生成するようになりました。これにより内部で使っているboto3のDEBUGログを有効にすると一番最初にJeffyの外部からメッセージを送るときもJeffyのSDKを使っておけばそこからトレースできるようになりました。<br>今後、boto3のDEBUGログを有効化せずに統一されたログフォーマットで出力するオプションも追加予定です。</p>\n\n\n\n<h2 class=\"wp-block-heading\">修正されたバグ</h2>\n\n\n\n<p>以下のバグを修正しました。</p>\n\n\n\n<ul><li>S3のデコレータでオブジェクトキーがマルチバイトの際に落ちるエラーを修正(<a href=\"https://github.com/serverless-operations/jeffy/issues/21\">#21</a>, <a href=\"https://github.com/serverless-operations/jeffy/issues/22\">#22</a>) ※これは厳密には1.1.1で修正されています</li><li>JsonSchemaValidator のclass名をTypoしていた問題を修正</li><li>DynamoDB Streamsのデコレータのメッセージが来た際のKeyErrorの発生を修正</li><li>一部のデコレータでeventおよびその処理結果のログ出力が漏れてた問題を修正</li></ul>\n\n\n\n<h2 class=\"wp-block-heading\">1.2も近日リリース予定</h2>\n\n\n\n<p>バージョン1.2の開発もすでに着手しており、大きなものとしては以下のアップデートを予定しています。</p>\n\n\n\n<ul><li>ログの出力先を変更しやすくする仕組み、およびそれを利用したKinesis Firehoseへの出力変更オプション</li><li>SQSやStream系のサービスで、より細やかな制御を行うためにMessageIDやReceiptHandleといったメタデータを含めた形のイベントデータを扱うハンドラを実装するための新しいデコレータ</li></ul>\n\n\n\n<h2 class=\"wp-block-heading\">今回のリリースを助けてくれた素晴らしいコントリビューター</h2>\n\n\n\n<p>今回のリリースにおいてissueによる提案やバグ報告、プルリクエストを送ってくれた<a href=\"https://github.com/Keisuke69\">Keisuke69</a>と<a href=\"https://github.com/youyo\">youyo</a>にとても感謝しています！</p>\n\n\n\n<p>フィードバックや実際に手を動かしてくれるコントリビュータの皆さんのおかげでJeffyは少しづつ良くなり、サーバーレスなデベロッパーにとって便利なものに成長していくでしょう。</p>\n\n\n\n<p>改めて感謝します！</p>\n\n\n\n<h3 class=\"wp-block-heading\">ありがとうございましたーーーー！！！<br>👏👏👏👏👏👏👏👏👏👏👏👏👏👏👏👏👏👏</h3>\n\n\n\n<p></p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2020.06.24","path":"/blog/72/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/06/OGP_1200x630.1.png","altText":"jeffy-logo","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"4","title":"Jeffy","path":"/tag/jeffy/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}