{"hash":"d3dc5a74472b579ca6ae7ca671dc4f013853a504","data":{"wordPressBlog":{"title":"AWS 開発基盤として、セキュリティを考慮したマルチアカウント構成のススメ","content":"\n<p>AWS環境を利用して開発を行う上で、複数のアカウントを跨ぎながら開発を行うことが一般的になってきました。例えば、商用環境（production）と開発環境（development）のアカウントを分離して利用したり、ステージング環境やQA環境を別途用意して検証を行うこともあるかと思います。一方、様々な組織がAWS環境を利用していて、それらの組織に対して個別にアカウントを払い出し、各アカウントがどのように利用されているか管理を行っていく場面も多々あるかと思います。</p>\n\n\n\n<p>本記事では、そういった場面においてどのように複数のアカウントを管理し、AWSを開発基盤として利用していけるかについて、セキュリティを考慮した観点を交えてお伝えしていきたいと思います。</p>\n\n\n\n<h2 class=\"wp-block-heading\">マルチアカウント構成にする理由</h2>\n\n\n\n<p>「一つのAWSアカウント」を複数の組織が利用したり、複数のシステムの構築運用に利用すること自体、可能です。しかし、管理において例えば以下のような悩みが発生することになります。</p>\n\n\n\n<ul>\n<li>別の組織や業務委託先によるアクセスを防ぐなど、AWSリソースやデータに対して細かく権限制御を行いたい</li>\n\n\n\n<li>組織・システムごとに費用を分けて管理したい</li>\n\n\n\n<li>商用環境へのアクセスや操作を限定し、意図しないミスを防ぎたい</li>\n\n\n\n<li>大規模なプロジェクトに取り組んでいて、ユーザー管理及び権限管理をしやすくしたい</li>\n\n\n\n<li>監査対応とログ管理のコストが増大し、そのための仕組みや運用の工夫が必要になる</li>\n</ul>\n\n\n\n<p>具体的には、複数の組織やプロジェクトから共通のAWSサービスを利用する場合、見せたくないリソースが他の組織から見えてしまったり、操作ができてしまうことが考えられます。IAM ポリシーなどで細かく制御することは十分可能ですが、変更がある度にリソースレベルで権限制御を行うことは辛い作業になることもあるかと思います。</p>\n\n\n\n<p>また、シングルアカウントでは、複数のユーザーグループによるAWS サービスの利用状況・ネットワーク構成・ロギング・DB運用やデータ管理など、様々な領域において密度の高いアカウント構成となるため、監査対応やログの調査にも膨大なコストがかかることが想定されます。</p>\n\n\n\n<p>これらの悩みを効果的に解決するために必要になるのがマルチアカウント戦略となります。</p>\n\n\n\n<h2 class=\"wp-block-heading\">AWS アカウント管理を行う上で考えたいポイント</h2>\n\n\n\n<p>以下のような分類で、マルチアカウント構成の観点から考慮すべきポイントがあります。</p>\n\n\n\n<h3 class=\"wp-block-heading\">認証方法</h3>\n\n\n\n<p>どのような方法でAWSアカウントへアクセスするかという点においては、AWS IAM アイデンティティセンター（AWS SSO）を利用して認証する場所を一つにまとめることができます。ID/PASS及びMFA認証を経て、以下のような画面からマネジメントコンソールを開くことができ、また一時的なアクセスキーを発行して利用することが可能です。</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/1-1024x892.png\" alt=\"AWS IAM アイデンティティセンター（AWS SSO）\" class=\"wp-image-641\" width=\"626\" height=\"544\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/1-1024x892.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/1-300x261.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/1-768x669.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/1.png 1049w\" sizes=\"(max-width: 626px) 100vw, 626px\" /></figure></div>\n\n\n<h3 class=\"wp-block-heading\">アカウントを分離する基準と構成</h3>\n\n\n\n<p>どのようにアカウントを分離するかについての基準と構成のアウトラインが必要です。具体的には、AWS Organizations の OU（Organization Unit）構成について考えることになりますが、「AWS Control Tower」 というマルチアカウント管理サービスの基本構成をベースラインとすることがおすすめです。</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_2.png\" alt=\"AWS Organizations の OU（Organization Unit）構成\" class=\"wp-image-642\" width=\"735\" height=\"602\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_2.png 881w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_2-300x246.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_2-768x629.png 768w\" sizes=\"(max-width: 735px) 100vw, 735px\" /></figure></div>\n\n\n<p>また、環境によってもアカウントを分離することが考えられます。以下のようにアカウントを分離することで、各アカウントのクオーターをフルで活用でき、システムコンポーネントやワークロードの分離、IaCによるリソース管理、ログ収集などが明確な権限の境界線を持った上で拡張・分離できるというメリットがあります。</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_1-1.png\" alt=\"Production / Non-production による区分\" class=\"wp-image-645\" width=\"727\" height=\"364\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_1-1.png 881w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_1-1-300x150.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_1-1-768x384.png 768w\" sizes=\"(max-width: 727px) 100vw, 727px\" /><figcaption class=\"wp-element-caption\">Production / Non-production による区分</figcaption></figure></div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_2-1.png\" alt=\"共通機能をまとめたOU（Shared Service OU）による区分\" class=\"wp-image-646\" width=\"743\" height=\"372\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_2-1.png 881w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_2-1-300x150.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_3_2-1-768x384.png 768w\" sizes=\"(max-width: 743px) 100vw, 743px\" /><figcaption class=\"wp-element-caption\">共通機能をまとめたOU（Shared Service OU）による区分</figcaption></figure></div>\n\n\n<h3 class=\"wp-block-heading\">権限設定</h3>\n\n\n\n<p>SSOで認証したユーザーに対して持たせる権限と、システムとしてアカウントを跨いだ構成になる場合の Assume Role 構成を検討します。ユーザー権限については、関係各者をグループングしてどのアカウントに・どこまでの権限を渡すかについても考えておく必要があります。例えば、以下のようなグループとして分離することが考えられます。</p>\n\n\n\n<ul>\n<li>AWS開発基盤管理者</li>\n\n\n\n<li>プロジェクト関係者、開発者</li>\n\n\n\n<li>外部パートナーなど、業務委託先の作業者</li>\n\n\n\n<li>QA, 監視, 監査担当者</li>\n</ul>\n\n\n\n<p>それぞれのポジションをロールとして適切な権限を適用し、メンバー入れ替え時も簡単に対応できる仕組みがAWS IAM アイデンティティセンター（AWS SSO）に備わっています。以下のように Permission Set を構成して各アカウント及びユーザーグループに指定する形で設定を行います。</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-1-1024x693.png\" alt=\"Permission SetにてSSOユーザーに指定するポリシーを設定\" class=\"wp-image-647\" width=\"696\" height=\"470\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-1-1024x693.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-1-300x203.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-1-768x520.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-1.png 1159w\" sizes=\"(max-width: 696px) 100vw, 696px\" /><figcaption class=\"wp-element-caption\">Permission SetにてSSOユーザーに指定するポリシーを設定</figcaption></figure></div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-2-1024x743.png\" alt=\"Permission Setが適用されているアカウント一覧\" class=\"wp-image-648\" width=\"698\" height=\"505\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-2-1024x743.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/2-2-300x218.png 300w\" sizes=\"(max-width: 698px) 100vw, 698px\" /><figcaption class=\"wp-element-caption\">Permission Setが適用されているアカウント一覧</figcaption></figure></div>\n\n\n<h3 class=\"wp-block-heading\">費用</h3>\n\n\n\n<p>AWS Organizations の一括請求によって支払が統合されます。注意点として、全体及びアカウントごとの Billing Alert または AWS Budgets を設定して監視を行うことをおすすめします。設定ミスや無限ループなどによる予期せぬコスト増にも早めに気づくことができます。</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-1-1024x697.png\" alt=\"CloudWatch の Billing メトリクスを有効化\" class=\"wp-image-649\" width=\"656\" height=\"446\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-1-1024x697.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-1-300x204.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-1-768x523.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-1.png 1209w\" sizes=\"(max-width: 656px) 100vw, 656px\" /><figcaption class=\"wp-element-caption\">CloudWatch の Billing メトリクスを有効化</figcaption></figure></div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-2.png\" alt=\"メトリクスから各アカウントごとの料金を確認、アラートを設定\" class=\"wp-image-650\" width=\"663\" height=\"260\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-2.png 766w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/3-2-300x117.png 300w\" sizes=\"(max-width: 663px) 100vw, 663px\" /><figcaption class=\"wp-element-caption\">メトリクスから各アカウントごとの料金を確認、アラートを設定</figcaption></figure></div>\n\n\n<h2 class=\"wp-block-heading\">マルチアカウント構成を取り入れた開発基盤の構成イメージ</h2>\n\n\n\n<p>例えば、複数のDevOpsチームを持ち、複数のプロダクトを構えるプラットフォーム開発基盤としての構成イメージがこちらになります。必要に応じて OU 及びそれに属する AWS アカウントを柔軟に追加することができ、アカウントレベルでも疎結合なアプローチとなります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"640\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_4-1024x640.png\" alt=\"マルチアカウント構成を取り入れた開発基盤の構成イメージ\" class=\"wp-image-651\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_4-1024x640.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_4-300x188.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_4-768x480.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_4.png 1281w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<h2 class=\"wp-block-heading\">セキュリティにおける考慮事項</h2>\n\n\n\n<p>複数のアカウントを管理していくときの懸念点として、コンプライアンスやセキュリティ面におけるリスク対応のための共通設定を適用する必要があります。一方で、一部のアカウントには開発のための例外措置や、より厳しいルールを指定するといったカスタマイズが必要になるケースがあります。</p>\n\n\n\n<p>マルチアカウント構成において AWS Control Tower を利用することである程度基本的なところは整いますが、各組織の特性や制約などを踏まえると、AWS Config によるルールの整備と、ルールに違反した構成が組まれた際の監視を自動化する仕組みが必要になります。そのためのアプローチとしては、以下のようは方法があります。</p>\n\n\n\n<ul>\n<li>AWS Security Hub / AWS Config / Amazon GuardDuty など、各種セキュリティ関連サービスの有効化と設定</li>\n\n\n\n<li>有事の際や検証にひかかったときに通知を行う仕組み</li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.30.15-1024x639.png\" alt=\"セキュリティ標準項目を指定したSecurity Hubのレポート画面\" class=\"wp-image-652\" width=\"598\" height=\"373\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.30.15-1024x639.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.30.15-300x187.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.30.15-768x479.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.30.15.png 1228w\" sizes=\"(max-width: 598px) 100vw, 598px\" /><figcaption class=\"wp-element-caption\">セキュリティ標準項目を指定したSecurity Hubのレポート画面</figcaption></figure></div>\n\n\n<p>Security Hub の設定では、標準としてAWSベストプラクティス・CIS AWS Foundations Benchmark (v1.2.0, v1,4,0)・NIST SP 800-53 などがサポートされています。</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.18.50.png\" alt=\"セキュリティ標準\" class=\"wp-image-654\" width=\"470\" height=\"151\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.18.50.png 826w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.18.50-300x96.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/Screenshot-2023-08-20-at-2.18.50-768x245.png 768w\" sizes=\"(max-width: 470px) 100vw, 470px\" /></figure></div>\n\n\n<p>また、AWS Config を利用してカスタムルールを適用する機能も使えます。AWS Lambda と連動して、チェックする周期の指定やチェックのロジックを実行して監視することができます。</p>\n\n\n\n<p>セキュリティに関するルールセットや監視については、作成するアカウント全てに適用しておくことが望ましいです。しかし、個別のアカウントごとに同じ設定をマニュアル対応することはやや現実的ではありません。よって、次項で説明するアカウント作成の自動化（Account Factory）を検討してみることをおすすめします。</p>\n\n\n\n<h2 class=\"wp-block-heading\">アカウント作成の自動化</h2>\n\n\n\n<p>AWS Control Tower を利用すると、Account Factory という機能を使って新規アカウントを作成することができます。Service Catalog に新規アカウント Product が登録されており、連携してアカウント名やOUなど必要なパラメータ情報を入力すると新規アカウントが作成されます。完了後は AWS Control Tower 管理下のアカウントとして紐づく流れになります。</p>\n\n\n\n<p>この一連の流れについて、公式でサポートされている「AFT（Account Factory for Terraform）」というソリューションがあります。アカウント新規作成、アカウント作成時のカスタマイズ、アカウント作成後の個別アカウントごとのカスタマイズ、アカウント作成後の全アカウント共通設定を適用するカスタマイズなど、様々な形でマルチアカウント構成を構築運用するための機能が含まれています。</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large is-resized\"><img decoding=\"async\" loading=\"lazy\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/aws_ct_diagram-1024x636.png\" alt=\"AFT（Account Factory for Terraform）\" class=\"wp-image-655\" width=\"699\" height=\"433\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/aws_ct_diagram-1024x636.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/aws_ct_diagram-300x186.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/aws_ct_diagram-768x477.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/aws_ct_diagram.png 1728w\" sizes=\"(max-width: 699px) 100vw, 699px\" /><figcaption class=\"wp-element-caption\">Terraform &gt; Control Tower より抜粋（2023.08.19）<br>https://developer.hashicorp.com/terraform/tutorials/aws/aws-control-tower-aft</figcaption></figure></div>\n\n\n<p>しかし、公式では、利用しない間にも発生する固定費用（NAT Gateway の料金など）を含めややコストが発生したり、高機能であるが故に、カジュアルに利用するという観点ではどうかなという疑問もあるかと思います。その場合、公式のAFTの構成を参考に、以下のようにカジュアルな形でアカウント作成とカスタマイズの設定を行う構成の仕組みを構築することができます。Terraform コードでアカウント作成情報を記載し、Terraform Cloud からデプロイする構成になります。フルサーバーレスで対応できる点もメリットになります。</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"620\" src=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_5-1024x620.png\" alt=\"Terraform Cloud からデプロイする構成\" class=\"wp-image-656\" srcset=\"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_5-1024x620.png 1024w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_5-300x182.png 300w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_5-768x465.png 768w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_5-1536x930.png 1536w, https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/image_5.png 1621w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></figure>\n\n\n\n<p>アカウント作成リクエストに関しては、以下のような Terraform コードを書いて IaC 化することが可能です。</p>\n\n\n\n<p>enviroment/<code>main.tf</code></p>\n\n\n\n<pre class=\"wp-block-code language-terraform\"><code>provider \"aws\" {\n  region = \"ap-northeast-1\"\n}\n\nmodule \"sandbox_account_01\" {\n  source = \"../modules/sandbox_account/\"\n  account_name             = \"sandbox01\"\n  product_id               = \"prod-xxxxxxxxxx\"\n  provisioning_artifact_id = \"pa-xxxxxxxxxxxx\"\n  new_account_params = {\n    account_email       = \"sandbox01@example.com\"\n    account_name        = \"sandbox01\"\n    ou                  = \"Sandbox (ou-xxxx)\"\n    sso_user_email      = \"sandbox01@example.com\"\n    sso_user_first_name = \"Katsuo\"\n    sso_user_last_name  = \"Isono\"\n  }\n}</code></pre>\n\n\n\n<p><code>modules/sandbox_account/main.tf</code></p>\n\n\n\n<pre class=\"wp-block-code language-terraform\"><code>resource \"aws_servicecatalog_provisioned_product\" \"new_controll_tower_managed_account\" {\n  name                     = var.account_name\n  product_id               = var.product_id\n  provisioning_artifact_id = var.provisioning_artifact_id\n\n  provisioning_parameters {\n    key   = \"AccountEmail\"\n    value = var.new_account_params.account_email\n  }\n  provisioning_parameters {\n    key   = \"AccountName\"\n    value = var.new_account_params.account_name\n  }\n  # ...\n}</code></pre>\n\n\n\n<p>アカウント作成が完了すれば、EventBridge から以下のようなイベントを取得することが可能です。このイベントを拾って別途 Terraform Cloud 上で workspace を作成し、後続処理として AWS Config のカスタムルールの設定やアカウントごとのカスタマイズなどを適用することが可能になります。</p>\n\n\n\n<pre class=\"wp-block-preformatted language-json\">{<br>  \"detail-type\": \"AWS Service Event via CloudTrail\",<br>  \"source\": \"aws.controltower\",<br>  \"detail\": {<br>    \"eventSource\": \"controltower.amazonaws.com\",<br>    \"eventName\": \"CreateManagedAccount\",<br>    \"awsRegion\": \"ap-northeast-1\",<br>    \"serviceEventDetails\": {<br>      \"createManagedAccountStatus\": {<br>        \"organizationalUnit\": {<br>          \"organizationalUnitName\": \"Sandbox\",<br>          \"organizationalUnitId\": \"ou-xxxx-xxxxx\"<br>        },<br>        \"account\": {<br>          \"accountName\": \"sandbox05\",<br>          \"accountId\": \"111122223333\"<br>        },<br>        \"state\": \"SUCCEEDED\",<br>        \"message\": \"AWS Control Tower successfully created an enrolled account.\",<br>      }<br>    }<br>    // ...<br>  }<br>}</pre>\n\n\n\n<p>いかがだったでしょうか。結論としては、各組織・プロジェクトの特性と制約を鑑みながら、可能な限りセキュリティと運用効率の両方を向上できる形で開発基盤を構築することを目指す形になります。AWSのベストプラクティスを積極的に理解して活用することも大事ですので、そういった情報を探していた方々の参考になると幸いです。不明点などあれば、お気軽にお問い合わせください。</p>\n","author":{"name":"Sonu Kim","description":"","avatars":{"avatar96":"https://secure.gravatar.com/avatar/5b527696e38c84c34048954d767b1537?s=96&d=mm&r=g"},"acf":{"userJpName":"金 仙優","userRole":"COO","facebook":"","twitter":"","github":""}},"date":"2023.08.20","path":"/blog/640/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2023/08/so-release.png","altText":"so-release-image","mediaDetails":{"width":1200}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"76","title":"AFT","path":"/tag/aft/"},{"id":"8","title":"AWS","path":"/tag/aws/"},{"id":"81","title":"AWS Organizations","path":"/tag/aws-organizations/"},{"id":"77","title":"Control Tower","path":"/tag/control-tower/"},{"id":"80","title":"EventBridge","path":"/tag/eventbridge/"},{"id":"2","title":"Serverless","path":"/tag/serverless/"},{"id":"82","title":"Service Catalog","path":"/tag/service-catalog/"},{"id":"78","title":"Terraform","path":"/tag/terraform/"},{"id":"79","title":"Terraform Cloud","path":"/tag/terraform-cloud/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}