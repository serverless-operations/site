{"hash":"e5bf1eed04e22915fe60df772657de15feda3786","data":{"wordPressBlog":{"title":"Serverless Frameworkを使ってビルド環境とデプロイ環境が分かれている場合のパイプラインを考える","content":"\n<h2 class=\"wp-block-heading\">概要</h2>\n\n\n\n<p>AWSを使ってサーバーレスアプリケーションを開発する際に、企業のコンプライアンスによっては特定のデプロイサーバ以外からのデプロイが禁止されている場合があります。<br>そのケースではCircleCIやCodeBuildなどの環境でテストとパッケージングを実施。デプロイのみをデプロイサーバから実施することになるでしょう。</p>\n\n\n\n<p>その際にどのようにパイプラインを構成するか考えていきます。</p>\n\n\n\n<h2 class=\"wp-block-heading\">構成</h2>\n\n\n\n<p>状況に応じて様々な構成が考えられるかと思いますが、以下のような構成を考えてみました。<br>1. ビルド環境でテストを行い、Serverless FrameworkにでソースコードのアーティファクトとCloudFormationを生成<br>2. それらをS3バケットに送信<br>3. デプロイサーバからaws-cliを使ってCloudFormationスタックを作成してデプロイ</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F4e75b6ee-8734-75e8-935b-32de5380b627.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ed2320b5fbd59cdf44055bff27a0fec4\" target=\"_blank\" rel=\"noreferrer noopener\"><img decoding=\"async\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F65478%2F4e75b6ee-8734-75e8-935b-32de5380b627.png?ixlib=rb-1.2.2&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ed2320b5fbd59cdf44055bff27a0fec4\" alt=\"Untitled (1).png\"/></a></figure>\n\n\n\n<h2 class=\"wp-block-heading\">ビルド</h2>\n\n\n\n<p>僕がよくやるケースですが、GitHubでリリースタグを作ったタイミングでリリース用のパッケージを生成します</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ git tag 1.0.0\n$ git push origin 1.0.0 # この後、ビルド環境上でバージョン1.0.0のパッケージを作成する</code></pre>\n\n\n\n<p>パッケージングとCloudFormationテンプレートの生成は<code>serverless package</code>コマンドを使いますが、デフォルトのままですと、バケットは自動生成されデプロイパッケージのプレフィックスは時刻になります</p>\n\n\n\n<p>このバケット名とパス名をコマンドラインから指定できるように<a href=\"https://github.com/horike37/serverless-package-customizer\" rel=\"noreferrer noopener\" target=\"_blank\">Serverless Package Customizer</a>プラグインを使用します。バケット名には予め作ったバケット名と、パス名にはタグ名（バージョン名）を指定します</p>\n\n\n\n<p>注) プレフィックスが時刻になるのは<code>serverless rollback</code>コマンドのためです。プレフィックスを書き換えるとこのコマンドが使えなくなるのに注意してください</p>\n\n\n\n<p>以下がパッケージを生成するためのスクリプトです。packageは<code>.serverless</code>配下に出力されるため、<code>s3 sync</code>でデプロイ用バケットに送信します</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ npx serverless package --s3-bucket ${DEPLOYMENT_BUCKET} --s3-path ${CIRCLE_TAG} --stage production\n$ aws s3 sync .serverless/ s3://${DEPLOYMENT_BUCKET}/${CIRCLE_TAG}</code></pre>\n\n\n\n<h2 class=\"wp-block-heading\">デプロイ</h2>\n\n\n\n<p>以上で、S3にソースコードとCloudFormationが出来上がったので、デプロイサーバからaws-cliでCloudFormationスタックを生成します。</p>\n\n\n\n<pre class=\"wp-block-code language-ssh\"><code>$ aws cloudformation create-stack --stack-name &lt;スタック名> --template-url https://s3-ap-northeast-1.amazonaws.com/&lt;バケット名>/&lt;tag名>/cloudformation-template-update-stack.json --capabilities '&#91;\"CAPABILITY_IAM\",\"CAPABILITY_NAMED_IAM\"]'</code></pre>\n\n\n\n<p>２回目以降のデプロイでは<code>update-stack</code>で該当バージョン番号のtag名を指定してデプロイします。</p>\n\n\n\n<p>以上！</p>\n","author":{"name":"Takahiro Horike","description":"Co-founder and CEO of Serverless Operations, Inc","avatars":{"avatar96":"https://secure.gravatar.com/avatar/2ee9db3a5b6c492acf66ec14c8a5d8dc?s=96&d=mm&r=g"},"acf":{"userJpName":"堀家 隆宏","userRole":"CEO","facebook":"https://www.facebook.com/horike.takahiro","twitter":"https://twitter.com/horike37","github":"https://github.com/horike37"}},"date":"2019.02.19","path":"/blog/50/","featuredMedia":{"sourceUrl":"https://cdn.getshifter.co/f6642def64a63651c07142605e040674c5441f6d/uploads/2020/07/https___camo.githubusercontent.jpeg","altText":"","mediaDetails":{"width":1950}},"categories":[{"id":"7","title":"Blog","path":"/category/blog/"}],"tags":[{"id":"11","title":"Serverless Framework","path":"/tag/serverless-framework/"}]},"metadata":{"siteName":"Serverless Operations","siteDescription":"Serverless Operationsは、これまでグローバルの第一線で培ってきたクラウド技術（AWS − アマゾンウェブサービス）の豊富な実績と知見を活かし、お客さまのサーバーレスによる開発や運用の支援、コンサルティングまで一貫してサポート。サーバーレスに関するさまざまな課題を解決いたします。","siteUrl":"https://serverless.co.jp","siteOgImage":"https://serverless.co.jp/ogp.png"}},"context":{}}